// --- Drag & Drop ---
const selectFolderBtn = document.getElementById('selectFolderBtn');
const selectFilesBtn = document.getElementById('selectFilesBtn');
const selectedFolderPathEl = document.getElementById('selectedFolderPath');
const uploadProgress = document.getElementById('uploadProgress');
const progressFill = document.getElementById('progressFill');
const progressText = document.getElementById('progressText');
const filesList = document.getElementById('filesList');
const fileCount = document.getElementById('fileCount');
const searchInput = document.getElementById('searchInput');
const searchBtn = document.getElementById('searchBtn');
const deleteFilesBtn = document.getElementById('deleteFilesBtn');
const messageModal = document.getElementById('messageModal');
const modalMessage = document.getElementById('modalMessage');
const closeModal = document.querySelector('.close');
const indexStatus = document.getElementById('indexStatus');

// --- Folder Select (experimental, works in Chromium browsers) ---
selectFolderBtn.addEventListener('click', () => {
    const folderInput = document.createElement('input');
    folderInput.type = 'file';
    folderInput.webkitdirectory = true;
    folderInput.multiple = true;
    folderInput.accept = '.pdf,.doc,.docx,.xls,.xlsx,.txt,.html,.htm,.csv,.tsv,.xml,.json';
    folderInput.style.display = 'none';
    folderInput.addEventListener('change', handleFiles);
    document.body.appendChild(folderInput);
    folderInput.click();
    folderInput.remove();
});

// --- File Select ---
selectFilesBtn.addEventListener('click', () => {
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.multiple = true;
    fileInput.accept = '.pdf,.doc,.docx,.xls,.xlsx,.txt,.html,.htm,.csv,.tsv,.xml,.json';
    fileInput.style.display = 'none';
    fileInput.addEventListener('change', handleFiles);
    document.body.appendChild(fileInput);
    fileInput.click();
    fileInput.remove();
});

// --- Upload Files ---
function handleFiles(e) {
    const files = e.target.files;
    if (!files || files.length === 0) return;
    // –û—Ç–æ–±—Ä–∞–∑–∏–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É
    try {
        const any = files[0];
        const wrp = any && any.webkitRelativePath ? any.webkitRelativePath : '';
        if (wrp) {
            const parts = wrp.split('/');
            const folderPath = parts.slice(0, -1).join('/');
            // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∏–∑ webkitdirectory API
            if (any.webkitdirectory && any.path) {
                // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π –ø—É—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                const fullPath = any.path.replace('/' + any.name, '').replace(folderPath, '');
                if (selectedFolderPathEl) selectedFolderPathEl.textContent = fullPath + '/' + folderPath;
            } else {
                // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                if (selectedFolderPathEl) selectedFolderPathEl.textContent = folderPath;
            }
        }
    } catch (_) {}
    uploadProgress.style.display = 'flex';
    let uploaded = 0;
    progressFill.style.width = '0%';
    progressText.textContent = '0%';

    const formData = new FormData();
    const allowedExt = new Set(['pdf','doc','docx','xls','xlsx','txt','html','htm','csv','tsv','xml','json']);
    let skipped = 0;
    for (let i = 0; i < files.length; i++) {
        const f = files[i];
        const baseName = (f.webkitRelativePath || f.name || '').split('/').pop();
        if (!baseName) { continue; }
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Office (~$, $)
        if (baseName.startsWith('~$') || baseName.startsWith('$')) {
            skipped++;
            continue;
        }
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        const dot = baseName.lastIndexOf('.');
        const ext = dot >= 0 ? baseName.slice(dot + 1).toLowerCase() : '';
        if (!allowedExt.has(ext)) {
            skipped++;
            continue;
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –∞—Ä—Ö–∏–≤–∞ –ø–∞–ø–∫–∏
        const relName = f.webkitRelativePath || f.name;
        formData.append('files', f, relName);
    }

    fetch('/upload', {
        method: 'POST',
        body: formData
    })
    .then(res => {
        if (res.status === 413) {
            return res.json().then(j => { throw new Error(j.error || '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π'); });
        }
        return res.json();
    })
    .then(data => {
        if (data.success) {
            // 1) –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            try { updateFilesList(); } catch (_) {}
            // 2) –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –≤ —Ñ–æ–Ω–µ (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è), —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
            try { rebuildIndexWithProgress().catch(() => {}); } catch (_) {}
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–ø–∫–∏');
        }
    })
    .then(() => { uploadProgress.style.display = 'none'; })
    .catch((err) => {
        showMessage(err && err.message ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
        uploadProgress.style.display = 'none';
    });
}

// --- Update Files List ---
function updateFilesList() {
    return fetch('/files_json')
        .then(res => res.json())
        .then(data => {
            const { folders = {}, file_statuses = {} } = data;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö/–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–∞–ø–æ–∫
            const folderStates = {};
            document.querySelectorAll('.folder-container').forEach(container => {
                const id = container.id;
                const content = container.querySelector('.folder-content');
                if (content) {
                    folderStates[id] = content.style.display !== 'none';
                }
            });
            
            // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            filesList.innerHTML = '';
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞–ø–∫–∏
            Object.keys(folders).sort().forEach(folderKey => {
                const files = folders[folderKey];
                const folderName = folderKey === 'root' ? '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã' : folderKey;
                const folderId = `folder-${folderName}`;
                const isExpanded = folderStates[folderId] !== false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã
                
                const folderDiv = document.createElement('div');
                folderDiv.className = 'folder-container';
                folderDiv.id = folderId;
                
                const headerDiv = document.createElement('div');
                headerDiv.className = 'folder-header';
                headerDiv.onclick = () => toggleFolder(folderName);
                
                headerDiv.innerHTML = `
                    <span class="folder-icon">üìÅ</span>
                    <span class="folder-name">${escapeHtml(folderName)}</span>
                    <span class="file-count-badge">${files.length}</span>
                    <span class="toggle-icon">${isExpanded ? '‚ñº' : '‚ñ∂'}</span>
                `;
                
                const contentDiv = document.createElement('div');
                contentDiv.className = 'folder-content';
                contentDiv.style.display = isExpanded ? 'block' : 'none';
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
                files.forEach(file => {
                    const fileDiv = renderFileItem(file, file_statuses);
                    contentDiv.appendChild(fileDiv);
                });
                
                folderDiv.appendChild(headerDiv);
                folderDiv.appendChild(contentDiv);
                filesList.appendChild(folderDiv);
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
            if (fileCount) {
                fileCount.textContent = data.total_files || 0;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–¥–µ–∫—Å–∞
            refreshIndexStatus();
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ—Ä–º–∏–Ω—ã –ø–æ–∏—Å–∫–∞ –∫ —Å—Å—ã–ª–∫–∞–º
            applyQueryToViewLinks();
            return true;
        })
        .catch(err => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', err);
            // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            return fetch('/')
                .then(res => res.text())
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newFilesList = doc.getElementById('filesList');
                    if (newFilesList && filesList) {
                        filesList.innerHTML = newFilesList.innerHTML;
                        setTimeout(restoreFolderStates, 100);
                    }
                    return true;
                });
        });
}

function renderFileItem(file, file_statuses) {
    // Simplified file item rendering without archives and traffic lights
    const wrapper = document.createElement('div');
    wrapper.className = 'file-item-wrapper';
    wrapper.dataset.filePath = file.path;
    
    const fileDiv = document.createElement('div');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
    const fileStatus = file_statuses[file.path] || {};
    const status = fileStatus.status || 'not_checked';
    const charCount = fileStatus.char_count;
    const isUnreadable = (status === 'unsupported') || (status === 'error') || (charCount === 0);
    
    fileDiv.className = 'file-item' + (isUnreadable ? ' file-disabled' : '');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Ñ–∞–π–ª–∞
    const sizeKB = (file.size / 1024).toFixed(1);
    let fileLink;
    
    if (isUnreadable) {
        fileLink = `<span class="file-name" title="–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è">${escapeHtml(file.name)}</span>`;
    } else {
        fileLink = `<a class="file-name result-file-link" href="/view/${encodeURIComponent(file.path)}" target="_blank" rel="noopener">${escapeHtml(file.name)}</a>`;
    }
    
    let charCountHtml = '';
    if (charCount !== null && charCount !== undefined) {
        charCountHtml = `<span class="file-chars${charCount === 0 ? ' text-danger' : ''}">–°–∏–º–≤–æ–ª–æ–≤: ${charCount}</span>`;
    }
    
    let errorHtml = '';
    if (fileStatus.error) {
        errorHtml = `<span class="file-error text-danger">${escapeHtml(fileStatus.error)}</span>`;
    } else if (status === 'unsupported') {
        errorHtml = `<span class="file-error text-danger">–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç</span>`;
    }
    
    fileDiv.innerHTML = `
        <div class="file-info">
            <span class="file-icon">üìÑ</span>
            <div class="file-details">
                ${fileLink}
                <span class="file-size">${sizeKB} KB</span>
                ${charCountHtml}
                ${errorHtml}
            </div>
        </div>
    `;
    
    wrapper.appendChild(fileDiv);
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    const resultsContainer = document.createElement('div');
    resultsContainer.className = 'file-search-results';
    resultsContainer.style.display = 'none';
    wrapper.appendChild(resultsContainer);
    
    return wrapper;
}

// --- Search ---

async function performSearch(terms) {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥ —Ñ–∞–π–ª–∞–º–∏
    document.querySelectorAll('.file-search-results').forEach(el => {
        el.style.display = 'none';
        el.innerHTML = '';
    });
    document.querySelectorAll('.file-item-wrapper[data-has-results]')
        .forEach(w => w.removeAttribute('data-has-results'));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–∏—Å–∫ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω
    window.searchWasPerformed = true;
    
    const resp = await fetch('/search', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
            search_terms: terms
        })
    });
    const data = await resp.json();
    try { localStorage.setItem('last_search_terms', terms); } catch (e) {}
    // –ö—Ä–∏—Ç–∏—á–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –¥–æ–∂–∏–¥–∞–µ–º—Å—è —Ä–µ–Ω–¥–µ—Ä–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await updateFilesList();
    
    if (data.results && data.results.length > 0) {
        const t = termsFromInput();
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ–∞–π–ª–∞–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥ –∫–∞–∂–¥—ã–º —Ñ–∞–π–ª–æ–º
        const resultsByFile = {};
        data.results.forEach(result => {
            const filePath = result.source || result.path;
            if (!resultsByFile[filePath]) {
                resultsByFile[filePath] = {
                    filename: result.filename,
                    perTerm: []
                };
            }
            if (result.per_term) {
                resultsByFile[filePath].perTerm.push(...result.per_term);
            }
        });
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
        Object.keys(resultsByFile).forEach(filePath => {
            const fileWrapper = document.querySelector(`.file-item-wrapper[data-file-path="${CSS.escape(filePath)}"]`);
            if (fileWrapper) {
                const resultsContainer = fileWrapper.querySelector('.file-search-results');
                if (resultsContainer) {
                    // –î–æ 2 —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Ä–º–∏–Ω
                    const maxSnippets = 2;
                    
                    const perTermHtml = resultsByFile[filePath].perTerm.map(entry => {
                        const snips = (entry.snippets || []).slice(0, maxSnippets).map(s => 
                            `<div class="context-snippet">${escapeHtml(s)}</div>`
                        ).join('');
                        
                        const termHtml = `${escapeHtml(entry.term)} (${entry.count})`;
                        
                        return `<div class="per-term-block">
                            <div class="found-terms"><span class="found-term">${termHtml}</span></div>
                            <div class="context-snippets">${snips || '<div class="context-empty">–ù–µ—Ç —Å–Ω–∏–ø–ø–µ—Ç–æ–≤</div>'}</div>
                        </div>`;
                    }).join('');
                    
                    resultsContainer.innerHTML = perTermHtml;
                    resultsContainer.style.display = 'block';
                    fileWrapper.setAttribute('data-has-results', '1');
                }
            }
        });
        
        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –≤—Ä—É—á–Ω—É—é —Å–≤–µ—Ä–Ω—É—Ç—ã
        expandFoldersWithResults();

        highlightSnippets(t);
        applyQueryToViewLinks();
    } else {
        // –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    }
}

function refreshSearchResultsIfActive() {
    const terms = searchInput.value.trim();
    
    if (!terms) {
        // FR-003: –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥ —Ñ–∞–π–ª–∞–º–∏
        document.querySelectorAll('.file-search-results').forEach(el => {
            el.style.display = 'none';
            el.innerHTML = '';
        });
        return;
    }
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Ä–º–∏–Ω—ã - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    performSearch(terms);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–∞–ø–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (—É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
function expandFoldersWithResults() {
    // –°–æ–±–∏—Ä–∞–µ–º –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    const foldersWithResults = new Set();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–∞–ø–∫–∏
    document.querySelectorAll('.folder-container:not(.archive-folder)').forEach(folderContainer => {
        const hasResults = folderContainer.querySelector('.file-search-results[style*="display: block"]');
        if (hasResults) {
            const folderName = folderContainer.querySelector('.folder-name')?.textContent;
            if (folderName) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –ø–∞–ø–∫–∞ –≤—Ä—É—á–Ω—É—é —Å–≤–µ—Ä–Ω—É—Ç–∞
                const savedState = localStorage.getItem('folder-' + folderName);
                if (savedState !== 'collapsed') {
                    folderContainer.classList.remove('collapsed');
                    const contentDiv = folderContainer.querySelector('.folder-content');
                    const toggleIcon = folderContainer.querySelector('.toggle-icon');
                    if (contentDiv) contentDiv.style.display = 'block';
                    if (toggleIcon) toggleIcon.textContent = '‚ñº';
                }
            }
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –ø–∞–ø–∫–∏
    document.querySelectorAll('.folder-container.archive-folder').forEach(archiveContainer => {
        const hasResults = archiveContainer.querySelector('.file-search-results[style*="display: block"]');
        if (hasResults) {
            const archiveId = archiveContainer.id;
            if (archiveId && archiveId.startsWith('archive-')) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∞—Ä—Ö–∏–≤–∞
                const archivePath = archiveId.replace('archive-', '').replace(/-/g, '/');
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∞—Ä—Ö–∏–≤ –≤—Ä—É—á–Ω—É—é —Å–≤–µ—Ä–Ω—É—Ç
                const savedState = localStorage.getItem('archive-' + archivePath);
                if (savedState !== 'collapsed') {
                    const contentDiv = archiveContainer.querySelector('.folder-content');
                    const toggleIcon = archiveContainer.querySelector('.toggle-icon');
                    if (contentDiv) contentDiv.style.display = 'block';
                    if (toggleIcon) toggleIcon.textContent = '‚ñº';
                }
            }
        }
    });
}

searchBtn.addEventListener('click', () => {
    const terms = searchInput.value.trim();
    if (!terms) {
        // –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å = –æ—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–¥ —Ñ–∞–π–ª–∞–º–∏
        fetch('/clear_results', { method: 'POST', headers: { 'Content-Type': 'application/json' } })
            .then(() => {
                document.querySelectorAll('.file-search-results').forEach(el => {
                    el.style.display = 'none';
                    el.innerHTML = '';
                });
                updateFilesList();
                refreshIndexStatus();
            });
        return;
    }
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
    performSearch(terms);
});

// FR-008: "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã" - —É–¥–∞–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∫–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë" —É–¥–∞–ª–µ–Ω–∞)
if (deleteFilesBtn) {
    deleteFilesBtn.addEventListener('click', () => {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏, –∞ —Ç–∞–∫–∂–µ —Å–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!')) {
            return;
        }
        
        // –í—ã–∑—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        fetch('/clear_all', { 
            method: 'POST', 
            headers: { 'Content-Type': 'application/json' } 
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ UI
                document.querySelectorAll('.file-search-results').forEach(el => {
                    el.style.display = 'none';
                    el.innerHTML = '';
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ (–ø–æ–∫–∞–∂–µ—Ç –ø—É—Å—Ç–æ–µ –¥–µ—Ä–µ–≤–æ)
                updateFilesList();
                refreshIndexStatus();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                const message = `–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${data.deleted_count}\n‚Ä¢ –ò–Ω–¥–µ–∫—Å —É–¥–∞–ª—ë–Ω: ${data.index_deleted ? '–¥–∞' : '–Ω–µ—Ç'}`;
                if (data.errors && data.errors.length > 0) {
                    const errorList = data.errors.map(e => `  - ${e.path}: ${e.error}`).join('\n');
                    showMessage(message + `\n‚Ä¢ –û—à–∏–±–∫–∏:\n${errorList}`);
                } else {
                    showMessage(message);
                }
            } else {
                showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
            showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        });
    });
}

// (–ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–∞ ‚Äî –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø—É—Å—Ç–æ–º –ø–æ–∏—Å–∫–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ)

// --- Build Index auto ---
function rebuildIndexWithProgress() {
    const bar = document.getElementById('indexBuildProgress');
    const fill = document.getElementById('indexBuildFill');
    const text = document.getElementById('indexBuildText');
    if (bar) bar.style.display = 'flex';
    if (fill) fill.style.width = '10%';
    if (text) text.textContent = '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞‚Ä¶';
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å –≥—Ä—É–ø–ø–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π
    return fetch('/build_index', { 
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ use_groups: true })
    })
        .then(res => res.json())
        .then(data => {
            if (!data.success) throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–ø–ø
            return pollIndexGroupStatus(fill, text);
        })
        .finally(() => {
            // –ù–µ —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º 100% –∏ —Å—Ç–∞—Ç—É—Å
        });
}

// --- Poll Index Group Status (increment-014) ---
function pollIndexGroupStatus(fill, text) {
    return new Promise((resolve, reject) => {
        const maxAttempts = 60; // 60 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
        let attempts = 0;
        
        const checkStatus = () => {
            attempts++;
            
            fetch('/index_status')
                .then(res => res.json())
                .then(data => {
                    const status = data.status || 'idle';
                    const groupStatus = data.group_status || {};
                    const currentGroup = data.current_group || '';
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —Ç–µ–∫—Å—Ç
                    let progress = 10;
                    let statusText = '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞‚Ä¶';
                    
                    if (groupStatus.fast === 'completed') {
                        progress = 33;
                        statusText = '‚úÖ –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã | –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω';
                    }
                    if (groupStatus.medium === 'completed') {
                        progress = 66;
                        statusText = '‚úÖ DOCX/XLSX –≥–æ—Ç–æ–≤—ã | –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω';
                    }
                    if (groupStatus.slow === 'completed' || status === 'completed') {
                        progress = 100;
                        statusText = '‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã';
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
                    if (status === 'running' && currentGroup) {
                        const groupLabels = {
                            'fast': 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: –±—ã—Å—Ç—Ä—ã–µ —Ñ–∞–π–ª—ã (TXT, CSV)',
                            'medium': 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: —Å—Ä–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã (DOCX, XLSX, PDF)',
                            'slow': 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (OCR, –∞—Ä—Ö–∏–≤—ã)'
                        };
                        statusText = groupLabels[currentGroup] || statusText;
                    }
                    
                    if (fill) fill.style.width = progress + '%';
                    if (text) text.textContent = statusText;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å –∏–Ω–¥–µ–∫—Å–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
                    if (progress >= 33) {
                        refreshIndexStatus();
                        updateFilesList();
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    if (status === 'completed' || progress === 100) {
                        refreshIndexStatus();
                        updateFilesList();
                        resolve();
                    } else if (status === 'error') {
                        reject(new Error('–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏'));
                    } else if (attempts >= maxAttempts) {
                        reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'));
                    } else {
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 1 —Å–µ–∫—É–Ω–¥—É
                        setTimeout(checkStatus, 1000);
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø
                    updateGroupsIndicator(groupStatus, status);
                })
                .catch(err => {
                    console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞:', err);
                    if (attempts >= maxAttempts) {
                        reject(err);
                    } else {
                        setTimeout(checkStatus, 1000);
                    }
                });
        };
        
        // –ü–µ—Ä–≤—ã–π –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 500–º—Å
        setTimeout(checkStatus, 500);
    });
}

// --- Update Groups Indicator (increment-014) ---
function updateGroupsIndicator(groupStatus, indexStatus) {
    const indicator = document.getElementById('groupsIndicator');
    if (!indicator) return;
    
    // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø
    indicator.style.display = 'block';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≥—Ä—É–ø–ø
    const groups = ['fast', 'medium', 'slow'];
    groups.forEach(groupName => {
        const groupDiv = indicator.querySelector(`[data-group="${groupName}"]`);
        if (!groupDiv) return;
        
        const status = groupStatus[groupName] || 'pending';
        const icon = groupDiv.querySelector('.group-icon');
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å—Ç–∞—Ç—É—Å–æ–≤
        groupDiv.classList.remove('pending', 'running', 'completed');
        groupDiv.classList.add(status);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
        if (status === 'completed') {
            icon.textContent = '‚úÖ';
        } else if (status === 'running') {
            icon.textContent = 'üîÑ';
        } else {
            icon.textContent = '‚è≥';
        }
        
        // –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ—Ç–≤–µ—Ç–µ refreshIndexStatus -> —Å–æ—Ö—Ä–∞–Ω–∏–º –≥–ª–æ–±–∞–ª—å–Ω–æ)
        try {
            if (window.__lastIndexStatus && window.__lastIndexStatus.group_times && window.__lastIndexStatus.group_times[groupName]) {
                const gt = window.__lastIndexStatus.group_times[groupName];
                const duration = gt.duration_sec;
                const label = groupDiv.querySelector('.group-label');
                if (label) {
                    if (typeof duration === 'number') {
                        label.textContent = label.textContent.replace(/\s*\(.*?—Å–µ–∫\)$/, '');
                        label.textContent += ` (${duration} —Å–µ–∫)`;
                    } else if (gt.started_at && gt.completed_at) {
                        // –ï—Å–ª–∏ duration –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∞ ‚Äî –ø–æ—Å—á–∏—Ç–∞–µ–º –Ω–∞ –ª–µ—Ç—É
                        const d = Math.round((new Date(gt.completed_at) - new Date(gt.started_at)) / 1000);
                        if (isFinite(d) && d >= 0) {
                            label.textContent = label.textContent.replace(/\s*\(.*?—Å–µ–∫\)$/, '');
                            label.textContent += ` (${d} —Å–µ–∫)`;
                        }
                    }
                }
            }
        } catch (_) {}
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    const hint = document.getElementById('groupsHint');
    if (hint) {
        if (indexStatus === 'completed') {
            hint.textContent = '‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º';
        } else if (groupStatus.fast === 'completed') {
            hint.textContent = 'üí° –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω! –û—Å—Ç–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ';
        } else {
            hint.textContent = 'üí° –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –º–µ—Ä–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø';
        }
    }

    // –ê–≤—Ç–æ-–ø–æ–≤—Ç–æ—Ä –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ MEDIUM/SLOW, –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –∑–∞–ø—É—Å–∫–∞–ª—Å—è —Ä–∞–Ω–µ–µ
    try {
        maybeRerunSearchOnGroupCompletion(groupStatus);
    } catch (_) {}
}

function termsFromInput() {
    const raw = (searchInput && searchInput.value ? searchInput.value : '').trim();
    if (raw) return raw.split(',').map(t => t.trim()).filter(Boolean);
    try {
        const saved = localStorage.getItem('last_search_terms') || '';
        return saved.split(',').map(t => t.trim()).filter(Boolean);
    } catch (_) { return []; }
}

function escapeHtml(s) {
    return s.replace(/[&<>"]+/g, ch => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[ch]));
}

function highlightSnippets(terms) {
    const snippets = document.querySelectorAll('.context-snippet');
    if (!terms || terms.length === 0) return;
    snippets.forEach(sn => {
        let html = sn.innerHTML;
        terms.forEach(term => {
            const re = new RegExp('(' + term.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + ')', 'gi');
            html = html.replace(re, '<span class="highlight">$1</span>');
        });
        sn.innerHTML = html;
    });
}

// --- Modal ---
function showMessage(msg) {
    modalMessage.textContent = msg;
    messageModal.style.display = 'flex';
}
closeModal.addEventListener('click', () => messageModal.style.display = 'none');
window.addEventListener('click', (e) => {
    if (e.target === messageModal) messageModal.style.display = 'none';
});

// --- Folder Toggle ---
function toggleFolder(folderName) {
    const folderId = 'folder-' + folderName;
    const folderElement = document.getElementById(folderId);
    const folderContainer = folderElement.closest('.folder-container');
    
    if (folderContainer.classList.contains('collapsed')) {
        folderContainer.classList.remove('collapsed');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage
        localStorage.setItem('folder-' + folderName, 'expanded');
    } else {
        folderContainer.classList.add('collapsed');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage
        localStorage.setItem('folder-' + folderName, 'collapsed');
    }
}

// --- Restore Folder States ---
function restoreFolderStates() {
    const folderContainers = document.querySelectorAll('.folder-container');
    folderContainers.forEach(container => {
        const folderHeader = container.querySelector('.folder-header');
        if (folderHeader) {
            const folderName = folderHeader.querySelector('.folder-name').textContent;
            const savedState = localStorage.getItem('folder-' + folderName);
            
            if (savedState === 'collapsed') {
                container.classList.add('collapsed');
            } else {
                container.classList.remove('collapsed');
            }
        }
    });
    
    // FR-009: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Ä—Ö–∏–≤–æ–≤ –∏–∑ localStorage
    const archiveFolders = document.querySelectorAll('.folder-container.archive-folder');
    archiveFolders.forEach(archiveDiv => {
        const archiveId = archiveDiv.id;
        if (archiveId && archiveId.startsWith('archive-')) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∞—Ä—Ö–∏–≤–∞ –∏–∑ ID
            const archivePath = archiveId.replace('archive-', '').replace(/-/g, '/');
            const contentDiv = archiveDiv.querySelector('.folder-content');
            const toggleIcon = archiveDiv.querySelector('.toggle-icon');
            
            if (contentDiv) {
                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–ª—é—á–∞
                let savedState = localStorage.getItem('archive-' + archivePath);
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                if (!savedState && archiveDiv.dataset && archiveDiv.dataset.path) {
                    savedState = localStorage.getItem('archive-' + archiveDiv.dataset.path);
                }
                
                if (savedState === 'expanded') {
                    contentDiv.style.display = 'block';
                    if (toggleIcon) toggleIcon.textContent = '‚ñº';
                } else if (savedState === 'collapsed') {
                    contentDiv.style.display = 'none';
                    if (toggleIcon) toggleIcon.textContent = '‚ñ∂';
                }
            }
        }
    });
}

// --- Initial ---
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –ø–æ–∏—Å–∫–∞ –∫–∞–∫ false –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.searchWasPerformed = false;
    
    refreshIndexStatus();
    setInterval(refreshIndexStatus, 8000);
    // –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ API
    updateFilesList().then(() => {
        applyQueryToViewLinks();
    });
});

// --- Index status ---
function refreshIndexStatus() {
    if (!indexStatus) return;
    fetch('/index_status')
        .then(res => res.json())
        .then(data => {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≥—Ä—É–ø–ø
            window.__lastIndexStatus = data;
            if (!data.exists) {
                indexStatus.textContent = '–°–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª: –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω';
                indexStatus.style.color = '#a00';
            } else {
                const size = (data.size || 0);
                const sizeKb = (size / 1024).toFixed(1);
                const entries = (data.entries == null) ? '‚Äî' : data.entries;
                indexStatus.textContent = `–°–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, ${sizeKb} KB, –∑–∞–ø–∏—Å–µ–π: ${entries}`;
                indexStatus.style.color = '#2a2';
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø (increment-014)
            if (data.group_status) {
                updateGroupsIndicator(data.group_status, data.status || 'idle');
            }
        })
        .catch(() => {
            indexStatus.textContent = '–°–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞';
            indexStatus.style.color = '#a00';
        });
}

// --- Helpers: –∞–≤—Ç–æ-–ø–æ–≤—Ç–æ—Ä –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥—Ä—É–ø–ø ---
function getActiveSearchTerms() {
    const raw = (searchInput && searchInput.value ? searchInput.value : '').trim();
    if (raw) return raw;
    try {
        return (localStorage.getItem('last_search_terms') || '').trim();
    } catch (_) {
        return '';
    }
}

function maybeRerunSearchOnGroupCompletion(groupStatus) {
    if (!window.searchWasPerformed) return; // –ø–æ–∏—Å–∫ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    const terms = getActiveSearchTerms();
    if (!terms) return; // –Ω–µ—Ç —Ç–µ—Ä–º–∏–Ω–æ–≤ ‚Äî –Ω–µ—á–µ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if (!window.__prevGroupStatus) window.__prevGroupStatus = {};
    if (!window.__autoReran) window.__autoReran = { medium: false, slow: false };
    const prev = window.__prevGroupStatus;
    const current = groupStatus || {};

    // –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –∞–≤—Ç–æ-–ø–æ–≤—Ç–æ—Ä–∞
    const targets = ['medium', 'slow'];
    for (const g of targets) {
        const was = prev[g] || 'pending';
        const now = current[g] || 'pending';
        if (!window.__autoReran[g] && was !== 'completed' && now === 'completed') {
            // –¢—Ä–∏–≥–≥–µ—Ä–∏–º –ø–æ–≤—Ç–æ—Ä –ø–æ–∏—Å–∫–∞ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –≥—Ä—É–ø–ø—É
            try { performSearch(terms); } catch (_) {}
            window.__autoReran[g] = true;
        }
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    window.__prevGroupStatus = { ...current };
}

// --- Append current terms to /view links ---
function applyQueryToViewLinks() {
    const terms = termsFromInput();
    const anchors = document.querySelectorAll('a.result-file-link');
    anchors.forEach(a => {
        try {
            const url = new URL(a.getAttribute('href'), window.location.origin);
            if (terms.length > 0) {
                url.searchParams.set('q', terms.join(','));
            } else {
                url.searchParams.delete('q');
            }
            a.setAttribute('href', url.pathname + (url.search ? url.search : ''));
        } catch (_) {}
    });
}
