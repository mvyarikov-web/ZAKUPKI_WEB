// --- Drag & Drop ---
// –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏
const selectFolderBtn = document.getElementById('selectFolderBtn');
const selectedFolderPathEl = document.getElementById('selectedFolderPath');
const uploadProgress = document.getElementById('uploadProgress');
const progressFill = document.getElementById('progressFill');
const progressText = document.getElementById('progressText');
const filesList = document.getElementById('filesList');
const fileCount = document.getElementById('fileCount');
const searchInput = document.getElementById('searchInput');
const searchBtn = document.getElementById('searchBtn');
const excludeModeToggle = document.getElementById('excludeModeToggle');
const toggleLabel = document.getElementById('toggleLabel');
// FR-008: –£–¥–∞–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ clearAllBtn - —Ç–æ–ª—å–∫–æ deleteFilesBtn
const deleteFilesBtn = document.getElementById('deleteFilesBtn');
// –ö–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –Ω–µ—Ç ‚Äî –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
const messageModal = document.getElementById('messageModal');
const modalMessage = document.getElementById('modalMessage');
const closeModal = document.querySelector('.close');
const indexStatus = document.getElementById('indexStatus');

// --- Exclude Mode Toggle (FR-009) ---
if (excludeModeToggle && toggleLabel) {
    excludeModeToggle.addEventListener('change', () => {
        if (excludeModeToggle.checked) {
            toggleLabel.textContent = '–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç';
            toggleLabel.classList.add('exclude-mode');
        } else {
            toggleLabel.textContent = '–°–æ–¥–µ—Ä–∂–∏—Ç';
            toggleLabel.classList.remove('exclude-mode');
        }
    });
}

// --- File Select --- (—É–¥–∞–ª–µ–Ω–æ: –≤—ã–±–æ—Ä –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)

// --- Folder Select (experimental, works in Chromium browsers) ---
selectFolderBtn.addEventListener('click', () => {
    const folderInput = document.createElement('input');
    folderInput.type = 'file';
    folderInput.webkitdirectory = true;
    folderInput.multiple = true;
    folderInput.accept = '.pdf,.doc,.docx,.xls,.xlsx,.txt,.html,.htm,.csv,.tsv,.xml,.json,.zip,.rar';
    folderInput.style.display = 'none';
    folderInput.addEventListener('change', handleFiles);
    document.body.appendChild(folderInput);
    folderInput.click();
    folderInput.remove();
});

// --- Upload Files ---
function handleFiles(e) {
    const files = e.target.files;
    if (!files || files.length === 0) return;
    // –û—Ç–æ–±—Ä–∞–∑–∏–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É
    try {
        const any = files[0];
        const wrp = any && any.webkitRelativePath ? any.webkitRelativePath : '';
        if (wrp) {
            const parts = wrp.split('/');
            const folderPath = parts.slice(0, -1).join('/');
            // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∏–∑ webkitdirectory API
            if (any.webkitdirectory && any.path) {
                // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π –ø—É—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                const fullPath = any.path.replace('/' + any.name, '').replace(folderPath, '');
                if (selectedFolderPathEl) selectedFolderPathEl.textContent = fullPath + '/' + folderPath;
            } else {
                // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                if (selectedFolderPathEl) selectedFolderPathEl.textContent = folderPath;
            }
        }
    } catch (_) {}
    uploadProgress.style.display = 'flex';
    let uploaded = 0;
    progressFill.style.width = '0%';
    progressText.textContent = '0%';

    const formData = new FormData();
    const allowedExt = new Set(['pdf','doc','docx','xls','xlsx','txt','html','htm','csv','tsv','xml','json','zip','rar']);
    let skipped = 0;
    for (let i = 0; i < files.length; i++) {
        const f = files[i];
        const baseName = (f.webkitRelativePath || f.name || '').split('/').pop();
        if (!baseName) { continue; }
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Office (~$, $)
        if (baseName.startsWith('~$') || baseName.startsWith('$')) {
            skipped++;
            continue;
        }
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        const dot = baseName.lastIndexOf('.');
        const ext = dot >= 0 ? baseName.slice(dot + 1).toLowerCase() : '';
        if (!allowedExt.has(ext)) {
            skipped++;
            continue;
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –∞—Ä—Ö–∏–≤–∞ –ø–∞–ø–∫–∏
        const relName = f.webkitRelativePath || f.name;
        formData.append('files', f, relName);
    }

    fetch('/upload', {
        method: 'POST',
        body: formData
    })
    .then(res => {
        if (res.status === 413) {
            return res.json().then(j => { throw new Error(j.error || '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π'); });
        }
        return res.json();
    })
    .then(data => {
        if (data.success) {
            // –¢–∏—Ö–æ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –±–µ–∑ –º–æ–¥–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            return rebuildIndexWithProgress();
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–ø–∫–∏');
        }
    })
    .then(() => { uploadProgress.style.display = 'none'; })
    .catch((err) => {
        showMessage(err && err.message ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
        uploadProgress.style.display = 'none';
    });
}

// --- Update Files List ---
function updateFilesList() {
    // FR-001, FR-009: –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Ä—Ö–∏–≤–æ–≤ –∫–∞–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫
    return fetch('/files_json')
        .then(res => res.json())
        .then(data => {
            const { folders = {}, archives = [], file_statuses = {} } = data;
            
            // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É –∞—Ä—Ö–∏–≤–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            const archivesMap = new Map();
            archives.forEach(archive => {
                archivesMap.set(archive.archive_path, archive.contents);
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö/–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–∞–ø–æ–∫
            const folderStates = {};
            document.querySelectorAll('.folder-container').forEach(container => {
                const id = container.id;
                const content = container.querySelector('.folder-content');
                if (content) {
                    folderStates[id] = content.style.display !== 'none';
                }
            });
            
            // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            filesList.innerHTML = '';
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞–ø–∫–∏
            Object.keys(folders).sort().forEach(folderKey => {
                const files = folders[folderKey];
                const folderName = folderKey === 'root' ? '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã' : folderKey;
                const folderId = `folder-${folderName}`;
                const isExpanded = folderStates[folderId] !== false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã
                
                const folderDiv = document.createElement('div');
                folderDiv.className = 'folder-container';
                folderDiv.id = folderId;
                
        // –í—ã—á–∏—Å–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–∞–ø–∫–∏
        const searchPerformed = (window.searchWasPerformed === true);
        // –ü–∞–ø–∫–∞ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–µ—Ä–æ–π, –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º gray
        const folderStatus = searchPerformed ? calculateFolderStatus(files, file_statuses, archivesMap, searchPerformed) : 'gray';
        const headerDiv = document.createElement('div');
                headerDiv.className = 'folder-header';
                headerDiv.onclick = () => toggleFolder(folderName);
                
                headerDiv.innerHTML = `
                    <span class="folder-icon">üìÅ</span>
                    <span class="folder-name">${escapeHtml(folderName)}</span>
                    <span class="file-count-badge">${files.length}</span>
                    <span class="traffic-light traffic-light-${folderStatus}" title="–°—Ç–∞—Ç—É—Å: ${folderStatus}"></span>
                    <button class="delete-folder-btn" title="–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É" onclick="event.stopPropagation(); deleteFolder('${escapeHtml(folderKey)}', '${escapeHtml(folderName)}')">
                        <svg class="icon-trash" viewBox="0 0 24 24" aria-hidden="true">
                            <path d="M9 3h6a1 1 0 0 1 1 1v2h4v2h-1v12a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V8H4V6h4V4a1 1 0 0 1 1-1zm1 3h4V5h-4v1zM7 8v12h10V8H7zm3 3h2v7h-2v-7zm4 0h2v7h-2v-7z"></path>
                        </svg>
                    </button>
                    <span class="toggle-icon">${isExpanded ? '‚ñº' : '‚ñ∂'}</span>
                `;
                
                const contentDiv = document.createElement('div');
                contentDiv.className = 'folder-content';
                contentDiv.style.display = isExpanded ? 'block' : 'none';
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
                files.forEach(file => {
                    const fileDiv = renderFileItem(file, archivesMap, file_statuses);
                    contentDiv.appendChild(fileDiv);
                });
                
                folderDiv.appendChild(headerDiv);
                folderDiv.appendChild(contentDiv);
                filesList.appendChild(folderDiv);
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
            if (fileCount) {
                fileCount.textContent = data.total_files || 0;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–¥–µ–∫—Å–∞
            refreshIndexStatus();
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ—Ä–º–∏–Ω—ã –ø–æ–∏—Å–∫–∞ –∫ —Å—Å—ã–ª–∫–∞–º
            applyQueryToViewLinks();
            return true;
        })
        .catch(err => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', err);
            // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            return fetch('/')
                .then(res => res.text())
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newFilesList = doc.getElementById('filesList');
                    if (newFilesList && filesList) {
                        filesList.innerHTML = newFilesList.innerHTML;
                        setTimeout(restoreFolderStates, 100);
                    }
                    return true;
                });
        });
}

function renderFileItem(file, archivesMap, file_statuses) {
    // FR-001, FR-009: –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∞—Ä—Ö–∏–≤–∞
    const fileDiv = document.createElement('div');
    fileDiv.className = 'file-item';
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
    const fileStatus = file_statuses[file.path] || {};
    const status = fileStatus.status || 'not_checked';
    const charCount = fileStatus.char_count;
    
    // FR-005: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –±—ã–ª –ª–∏ –ø–æ–∏—Å–∫
    const hasSearchResults = window.TrafficLights.hasSearchResultsForFile(file.path);
    const searchPerformed = window.TrafficLights.isSearchPerformed();
    let trafficLight = window.TrafficLights.getFileTrafficLightColor(status, charCount, hasSearchResults, searchPerformed);

    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–æ–º
    if (file.is_archive && archivesMap.has(file.path)) {
        // FR-008: –≠—Ç–æ –∞—Ä—Ö–∏–≤ - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∫ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º—É—é –ø–∞–ø–∫—É —Å–æ —Å–ª–æ–≤–æ–º "–ê—Ä—Ö–∏–≤" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        const archiveContents = archivesMap.get(file.path);
        fileDiv.className = 'folder-container archive-folder';
        fileDiv.id = `archive-${file.path.replace(/[^a-zA-Z0-9]/g, '-')}`;
        fileDiv.dataset.path = file.path; // FR-009: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –¥–ª—è localStorage
        
    // –í—ã—á–∏—Å–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∞—Ä—Ö–∏–≤–∞; –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—Å–µ–≥–¥–∞ —Å–µ—Ä—ã–π
    const archiveStatus = searchPerformed ? calculateArchiveStatus(archiveContents, file_statuses, searchPerformed) : 'gray';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
        const savedArchiveState = localStorage.getItem('archive-' + file.path);
        const isArchiveExpanded = savedArchiveState !== 'collapsed'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ
        
        const archiveHeaderDiv = document.createElement('div');
        archiveHeaderDiv.className = 'folder-header';
        archiveHeaderDiv.onclick = () => toggleArchive(file.path);
        
        // FR-008: –í –Ω–∞–∑–≤–∞–Ω–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ "–ê—Ä—Ö–∏–≤", –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é –ø–∞–ø–∫—É
        const archiveName = file.name.replace(/\.(zip|rar)$/i, '');
        archiveHeaderDiv.innerHTML = `
            <span class="folder-icon">üìÅ</span>
            <span class="folder-name">${escapeHtml(archiveName)} (–ê—Ä—Ö–∏–≤)</span>
            <span class="file-count-badge">${archiveContents.length}</span>
            <span class="traffic-light traffic-light-${archiveStatus}" title="–°—Ç–∞—Ç—É—Å: ${archiveStatus}"></span>
            <button class="delete-btn" title="–£–¥–∞–ª–∏—Ç—å –∞—Ä—Ö–∏–≤" onclick="event.stopPropagation(); deleteFile('${escapeHtml(file.path)}')">
                <svg class="icon-trash" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M9 3h6a1 1 0 0 1 1 1v2h4v2h-1v12a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V8H4V6h4V4a1 1 0 0 1 1-1zm1 3h4V5h-4v1zM7 8v12h10V8H7zm3 3h2v7h-2v-7zm4 0h2v7h-2v-7z"></path>
                </svg>
            </button>
            <span class="toggle-icon">${isArchiveExpanded ? '‚ñº' : '‚ñ∂'}</span>
        `;
        
        const archiveContentDiv = document.createElement('div');
        archiveContentDiv.className = 'folder-content';
        archiveContentDiv.style.display = isArchiveExpanded ? 'block' : 'none';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞
        archiveContents.forEach(entry => {
            if (entry.status === 'error') {
                const errorDiv = document.createElement('div');
                errorDiv.className = 'file-item file-disabled';
                errorDiv.innerHTML = `
                    <div class="file-info">
                        <span class="file-icon">‚ö†Ô∏è</span>
                        <div class="file-details">
                            <span class="file-name">${escapeHtml(entry.name || file.name)}</span>
                            <span class="file-error text-danger">${escapeHtml(entry.error || '–û—à–∏–±–∫–∞')}</span>
                        </div>
                    </div>
                `;
                archiveContentDiv.appendChild(errorDiv);
            } else if (entry.is_virtual_folder) {
                // –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∞—Ä—Ö–∏–≤–∞
                const folderDiv = document.createElement('div');
                folderDiv.className = 'file-item virtual-folder';
                folderDiv.innerHTML = `
                    <div class="file-info">
                        <span class="folder-icon">üìÅ</span>
                        <div class="file-details">
                            <span class="file-name">${escapeHtml(entry.name)}</span>
                        </div>
                    </div>
                `;
                archiveContentDiv.appendChild(folderDiv);
            } else {
                // –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ –∞—Ä—Ö–∏–≤–∞ - —Ç–æ–∂–µ –Ω—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
                const entryDiv = document.createElement('div');
                entryDiv.className = 'file-item-wrapper';
                entryDiv.setAttribute('data-file-path', entry.path);
                
                const icon = entry.is_archive ? 'üì¶' : 'üìÑ';
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ñ–∞–π–ª–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞
                const entryStatus = file_statuses[entry.path] || {};
                const entryCharCount = entryStatus.char_count || 0;
                const entryHasResults = window.TrafficLights.hasSearchResultsForFile(entry.path);
                const entryTrafficLight = window.TrafficLights.getFileTrafficLightColor(entryStatus.status || 'not_checked', entryCharCount, entryHasResults, searchPerformed);
                const isUnreadable = (entryStatus.status === 'unsupported') || (entryStatus.status === 'error') || (entryCharCount === 0);
                
                entryDiv.innerHTML = `
                    <div class="file-item${isUnreadable ? ' file-disabled' : ''}">
                        <div class="file-info">
                            <span class="file-icon">${icon}</span>
                            <div class="file-details">
                                ${isUnreadable ? 
                                    `<span class="file-name" title="–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è">${escapeHtml(entry.name)}</span>` :
                                    `<a class="file-name result-file-link" href="/view/${encodeURIComponent(entry.path)}" target="_blank" rel="noopener">${escapeHtml(entry.name)}</a>`
                                }
                                <span class="file-size">${(entry.size / 1024).toFixed(1)} KB</span>
                                ${entryCharCount !== undefined ? `<span class="file-chars${entryCharCount === 0 ? ' text-danger' : ''}">–°–∏–º–≤–æ–ª–æ–≤: ${entryCharCount}</span>` : ''}
                                ${entryStatus.error ? `<span class="file-error text-danger">${escapeHtml(entryStatus.error)}</span>` : ''}
                                ${entryStatus.status === 'unsupported' ? `<span class="file-error text-danger">–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç</span>` : ''}
                            </div>
                        </div>
                        <span class="traffic-light traffic-light-${entryTrafficLight}" data-status="${entryStatus.status || 'not_checked'}" data-chars="${entryCharCount}" title="–°—Ç–∞—Ç—É—Å: ${entryStatus.status || 'not_checked'}"></span>
                    </div>
                    <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ–¥ —Ñ–∞–π–ª–æ–º –∏–∑ –∞—Ä—Ö–∏–≤–∞ -->
                    <div class="file-search-results" style="display:none;"></div>
                `;
                archiveContentDiv.appendChild(entryDiv);
            }
        });
        
        fileDiv.appendChild(archiveHeaderDiv);
        fileDiv.appendChild(archiveContentDiv);
    } else {
        // –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª - —Å–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        fileDiv.className = 'file-item-wrapper';
        fileDiv.setAttribute('data-file-path', file.path);
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–∏—Å–∫–∞
        trafficLight = window.TrafficLights.getFileTrafficLightColor(status, charCount, hasSearchResults, searchPerformed);
        
        const icon = file.is_archive ? 'üì¶' : 'üìÑ';
        const isUnreadable = (status === 'unsupported') || (status === 'error') || (charCount !== undefined && charCount === 0);
        
        fileDiv.innerHTML = `
            <div class="file-item${isUnreadable ? ' file-disabled' : ''}">
                <div class="file-info">
                    <span class="file-icon">${icon}</span>
                    <div class="file-details">
                        ${isUnreadable ? 
                            `<span class="file-name" title="–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è">${escapeHtml(file.name)}</span>` :
                            `<a class="file-name result-file-link" href="/view/${encodeURIComponent(file.path)}" target="_blank" rel="noopener">${escapeHtml(file.name)}</a>`
                        }
                        <span class="file-size">${(file.size / 1024).toFixed(1)} KB</span>
                        ${charCount !== undefined ? `<span class="file-chars${charCount === 0 ? ' text-danger' : ''}">–°–∏–º–≤–æ–ª–æ–≤: ${charCount}</span>` : ''}
                        ${fileStatus.error ? `<span class="file-error text-danger">${escapeHtml(fileStatus.error)}</span>` : ''}
                        ${status === 'unsupported' ? `<span class="file-error text-danger">–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç</span>` : ''}
                    </div>
                </div>
                <div class="file-status">
                    <span class="traffic-light traffic-light-${trafficLight}" data-status="${status}" data-chars="${charCount ?? ''}" title="–°—Ç–∞—Ç—É—Å: ${status}"></span>
                    <button class="delete-btn" title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª" onclick="deleteFile('${escapeHtml(file.path)}')">
                        <svg class="icon-trash" viewBox="0 0 24 24" aria-hidden="true">
                            <path d="M9 3h6a1 1 0 0 1 1 1v2h4v2h-1v12a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V8H4V6h4V4a1 1 0 0 1 1-1zm1 3h4V5h-4v1zM7 8v12h10V8H7zm3 3h2v7h-2v-7zm4 0h2v7h-2v-7z"></path>
                        </svg>
                    </button>
                </div>
            </div>
            <!-- FR-003, FR-004, FR-005: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ–¥ —Ñ–∞–π–ª–æ–º -->
            <div class="file-search-results" style="display:none;"></div>
        `;
    }
    
    return fileDiv;
}

function toggleArchive(archivePath) {
    // FR-008, FR-009: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ (–∫–∞–∫ –æ–±—ã—á–Ω–∞—è –ø–∞–ø–∫–∞)
    const archiveId = `archive-${archivePath.replace(/[^a-zA-Z0-9]/g, '-')}`;
    const archiveDiv = document.getElementById(archiveId);
    
    if (archiveDiv) {
        const contentDiv = archiveDiv.querySelector('.folder-content');
        const toggleIcon = event.currentTarget.querySelector('.toggle-icon');
        
        if (contentDiv) {
            const isHidden = contentDiv.style.display === 'none';
            contentDiv.style.display = isHidden ? 'block' : 'none';
            if (toggleIcon) {
                toggleIcon.textContent = isHidden ? '‚ñº' : '‚ñ∂';
            }
            // FR-009: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –≤ localStorage
            try {
                localStorage.setItem('archive-' + archivePath, isHidden ? 'expanded' : 'collapsed');
            } catch (e) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –≤ localStorage', e);
            }
        }
    }
}

// FR-005: Helper function to get traffic light color based on status
// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ –º–æ–¥—É–ª—è traffic-lights.js
function getTrafficLightColor(status, charCount = null, hasSearchResults = false, searchPerformed = false) {
    return window.TrafficLights.getFileTrafficLightColor(status, charCount, hasSearchResults, searchPerformed);
}

// FR-006, FR-007: Calculate folder status based on files inside
// –õ–æ–≥–∏–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ –º–æ–¥—É–ª—è traffic-lights.js
function calculateFolderStatus(files, file_statuses, archivesMap, searchPerformed = false) {
    const fileColors = [];
    
    for (const file of files) {
        const fileStatus = file_statuses[file.path] || {};
        const status = fileStatus.status || 'not_checked';
        const charCount = fileStatus.char_count || 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        const hasSearchResults = window.TrafficLights.hasSearchResultsForFile(file.path);
        
        const lightColor = window.TrafficLights.getFileTrafficLightColor(status, charCount, hasSearchResults, searchPerformed);
        fileColors.push(lightColor);
        
        // FR-006: –ï—Å–ª–∏ —ç—Ç–æ –∞—Ä—Ö–∏–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if (file.is_archive && archivesMap.has(file.path)) {
            const archiveContents = archivesMap.get(file.path);
            for (const entry of archiveContents) {
                const entryStatus = file_statuses[entry.path] || {};
                const entryCharCount = entryStatus.char_count || 0;
                
                const entryHasResults = window.TrafficLights.hasSearchResultsForFile(entry.path);
                const entryLightColor = window.TrafficLights.getFileTrafficLightColor(entryStatus.status || 'not_checked', entryCharCount, entryHasResults, searchPerformed);
                fileColors.push(entryLightColor);
            }
        }
    }
    
    return window.TrafficLights.getFolderTrafficLightColor(fileColors);
}

// FR-006: Calculate archive status based on its contents
// –õ–æ–≥–∏–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ –º–æ–¥—É–ª—è traffic-lights.js
function calculateArchiveStatus(archiveContents, file_statuses, searchPerformed = false) {
    const fileColors = [];
    
    for (const entry of archiveContents) {
        const entryStatus = file_statuses[entry.path] || {};
        const entryCharCount = entryStatus.char_count || 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        const entryHasResults = window.TrafficLights.hasSearchResultsForFile(entry.path);
        
        const lightColor = window.TrafficLights.getFileTrafficLightColor(entryStatus.status || 'not_checked', entryCharCount, entryHasResults, searchPerformed);
        fileColors.push(lightColor);
    }
    
    return window.TrafficLights.getFolderTrafficLightColor(fileColors);
}

// --- Delete File ---
function deleteFile(filename) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª ' + filename + '?')) return;
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è URL
    const encodedFilename = encodeURIComponent(filename);
    console.log('–£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª:', filename, '–ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π:', encodedFilename);
    
    fetch('/delete/' + encodedFilename, {
        method: 'DELETE'
    })
    .then(res => res.json())
    .then(data => {
        if (data.success) {
            showMessage('–§–∞–π–ª —É–¥–∞–ª—ë–Ω. –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å‚Ä¶');
            return rebuildIndexWithProgress().then(() => {
                showMessage('–ò–Ω–¥–µ–∫—Å –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω');
                updateFilesList();
                refreshSearchResultsIfActive();
            });
        } else {
            showMessage(data.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
        showMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
    });
}

// --- Delete Folder ---
function deleteFolder(folderKey, folderDisplayName) {
    const confirmMessage = folderKey === 'root' 
        ? `–£–¥–∞–ª–∏—Ç—å –í–°–ï —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!`
        : `–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É "${folderDisplayName}" –∏ –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –Ω–µ–π? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!`;
        
    if (!confirm(confirmMessage)) return;
    
    console.log('–£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É:', folderKey, '–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è:', folderDisplayName);
    
    const encodedFolderPath = encodeURIComponent(folderKey);
    
    fetch('/delete_folder/' + encodedFolderPath, {
        method: 'DELETE'
    })
    .then(res => res.json())
    .then(data => {
        if (data.success) {
            // –ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –º–æ–ª—á–∞ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            return rebuildIndexWithProgress().then(() => {
                updateFilesList();
                refreshSearchResultsIfActive();
            });
        } else {
            showMessage(data.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏');
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏:', error);
        showMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏');
    });
}

// --- Search ---

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞
function updateTrafficLightsAfterSearch() {
    const searchPerformed = window.TrafficLights.isSearchPerformed();
    console.log('üîç updateTrafficLightsAfterSearch: searchPerformed =', searchPerformed);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    document.querySelectorAll('.file-item').forEach(fileItem => {
        const fileWrapper = fileItem.closest('.file-item-wrapper');
        if (!fileWrapper) return;
        
        const filePath = fileWrapper.getAttribute('data-file-path');
        if (!filePath) return;
        
        const trafficLight = fileItem.querySelector('.traffic-light');
        if (!trafficLight) return;
        
        // –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ (–æ–Ω–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ)
        let status = trafficLight.getAttribute('data-status') || 'not_checked';
        let charCount = parseInt(trafficLight.getAttribute('data-chars') || '0', 10);
        
        // –ï—Å–ª–∏ data-–∞—Ç—Ä–∏–±—É—Ç—ã –ø—É—Å—Ç—ã–µ, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ DOM
        if (!status || status === 'not_checked') {
            const hasError = fileItem.querySelector('.file-error');
            const isDisabled = fileItem.classList.contains('file-disabled');
            
            if (hasError || isDisabled) {
                const errorText = hasError ? hasError.textContent : '';
                if (errorText.includes('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç')) {
                    status = 'unsupported';
                } else {
                    status = 'error';
                }
                charCount = 0;
            } else {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º char_count –∏–∑ .file-chars
                const charsEl = fileItem.querySelector('.file-chars');
                if (charsEl && charsEl.textContent) {
                    const m = charsEl.textContent.match(/(\d+)/);
                    if (m) {
                        charCount = parseInt(m[1], 10);
                        if (charCount > 0) {
                            status = 'contains_keywords'; // –§–∞–π–ª –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω
                        } else {
                            status = 'error'; // –ù—É–ª–µ–≤–æ–π –æ–±—ä—ë–º = –æ—à–∏–±–∫–∞
                        }
                    }
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        const hasSearchResults = window.TrafficLights.hasSearchResultsForFile(filePath);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Ü–≤–µ—Ç —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞
        const newColor = window.TrafficLights.getFileTrafficLightColor(status, charCount, hasSearchResults, searchPerformed);
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log(`üö¶ –§–∞–π–ª: ${filePath}, —Å—Ç–∞—Ç—É—Å: ${status}, —Å–∏–º–≤–æ–ª–æ–≤: ${charCount}, –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${hasSearchResults}, —Ü–≤–µ—Ç: ${newColor}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä
        trafficLight.className = `traffic-light traffic-light-${newColor}`;
        // –û–±–Ω–æ–≤–ª—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–µ—Ä–µ—Å—á—ë—Ç–æ–≤
        trafficLight.setAttribute('data-status', status);
        trafficLight.setAttribute('data-chars', charCount.toString());
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã –¥–ª—è –ø–∞–ø–æ–∫ –∏ –∞—Ä—Ö–∏–≤–æ–≤
    document.querySelectorAll('.folder-container').forEach(folderContainer => {
        const folderHeader = folderContainer.querySelector('.folder-header');
        if (!folderHeader) return;
        
        const folderContent = folderContainer.querySelector('.folder-content');
        if (!folderContent) return;
        
        // –°–æ–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        const fileColors = [];
        folderContent.querySelectorAll('.file-item .traffic-light').forEach(light => {
            const color = light.classList.contains('traffic-light-red') ? 'red' :
                         light.classList.contains('traffic-light-green') ? 'green' :
                         light.classList.contains('traffic-light-yellow') ? 'yellow' : 'gray';
            fileColors.push(color);
        });
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–∞–ø–∫–∏
        const folderColor = window.TrafficLights.getFolderTrafficLightColor(fileColors);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä –ø–∞–ø–∫–∏
        const folderTrafficLight = folderHeader.querySelector('.traffic-light');
        if (folderTrafficLight) {
            folderTrafficLight.className = `traffic-light traffic-light-${folderColor}`;
        }
    });
}

async function performSearch(terms) {
    // FR-003: –£–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ø–æ–¥ —Ñ–∞–π–ª–∞–º–∏
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥ —Ñ–∞–π–ª–∞–º–∏
    document.querySelectorAll('.file-search-results').forEach(el => {
        el.style.display = 'none';
        el.innerHTML = '';
    });
    document.querySelectorAll('.file-item-wrapper[data-has-results]')
        .forEach(w => w.removeAttribute('data-has-results'));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–∏—Å–∫ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω
    window.searchWasPerformed = true;
    
    const excludeMode = excludeModeToggle && excludeModeToggle.checked;
    
    const resp = await fetch('/search', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
            search_terms: terms,
            exclude_mode: excludeMode 
        })
    });
    const data = await resp.json();
    try { localStorage.setItem('last_search_terms', terms); } catch (e) {}
    // –ö—Ä–∏—Ç–∏—á–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –¥–æ–∂–∏–¥–∞–µ–º—Å—è —Ä–µ–Ω–¥–µ—Ä–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await updateFilesList();
    
    if (data.results && data.results.length > 0) {
            const t = termsFromInput();
            
            // FR-004, FR-005: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ–∞–π–ª–∞–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥ –∫–∞–∂–¥—ã–º —Ñ–∞–π–ª–æ–º
            const resultsByFile = {};
            data.results.forEach(result => {
                const filePath = result.source || result.path;
                if (!resultsByFile[filePath]) {
                    resultsByFile[filePath] = {
                        filename: result.filename,
                        perTerm: []
                    };
                }
                if (result.per_term) {
                    resultsByFile[filePath].perTerm.push(...result.per_term);
                }
            });
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
            Object.keys(resultsByFile).forEach(filePath => {
                const fileWrapper = document.querySelector(`.file-item-wrapper[data-file-path="${CSS.escape(filePath)}"]`);
                if (fileWrapper) {
                    const resultsContainer = fileWrapper.querySelector('.file-search-results');
                    if (resultsContainer) {
                        // FR-004, FR-009: –î–æ 2 —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Ä–º–∏–Ω (–∏–ª–∏ 1 –≤ —Ä–µ–∂–∏–º–µ exclude)
                        const isExcludeMode = excludeModeToggle && excludeModeToggle.checked;
                        const maxSnippets = isExcludeMode ? 1 : 2;
                        
                        const perTermHtml = resultsByFile[filePath].perTerm.map(entry => {
                            const snips = (entry.snippets || []).slice(0, maxSnippets).map(s => 
                                `<div class="context-snippet">${escapeHtml(s)}</div>`
                            ).join('');
                            
                            // FR-009: –ï—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç:", –≤—ã–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫—Ä–∞—Å–Ω—ã–º
                            let termHtml;
                            if (entry.term.startsWith('–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç:')) {
                                const parts = entry.term.split(':');
                                termHtml = `<span class="exclude-prefix">${escapeHtml(parts[0])}:</span> ${escapeHtml(parts.slice(1).join(':').trim())}`;
                            } else {
                                termHtml = `${escapeHtml(entry.term)} (${entry.count})`;
                            }
                            
                            return `<div class="per-term-block">
                                <div class="found-terms"><span class="found-term">${termHtml}</span></div>
                                <div class="context-snippets">${snips || '<div class="context-empty">–ù–µ—Ç —Å–Ω–∏–ø–ø–µ—Ç–æ–≤</div>'}</div>
                            </div>`;
                        }).join('');
                        
                        resultsContainer.innerHTML = perTermHtml;
                        resultsContainer.style.display = 'block';
                        fileWrapper.setAttribute('data-has-results', '1');
                    }
                }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            updateTrafficLightsAfterSearch();
            
            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–∞–≤–µ—Ä—Ö, –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ, –Ω–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–Ω–∏–∑
            document.querySelectorAll('.folder-content').forEach(contentDiv => {
                const wrappers = Array.from(contentDiv.querySelectorAll(':scope > .file-item-wrapper, :scope > .file-item, :scope > .folder-container.archive-folder'));
                
                const scored = wrappers.map(el => {
                    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ü–≤–µ—Ç —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ –∏–∑ DOM
                    const trafficLight = el.querySelector('.traffic-light');
                    let lightColor = window.TrafficLights.COLORS.GRAY;
                    
                    if (trafficLight) {
                        if (trafficLight.classList.contains('traffic-light-red')) {
                            lightColor = window.TrafficLights.COLORS.RED;
                        } else if (trafficLight.classList.contains('traffic-light-green')) {
                            lightColor = window.TrafficLights.COLORS.GREEN;
                        } else if (trafficLight.classList.contains('traffic-light-yellow')) {
                            lightColor = window.TrafficLights.COLORS.YELLOW;
                        } else if (trafficLight.classList.contains('traffic-light-gray')) {
                            lightColor = window.TrafficLights.COLORS.GRAY;
                        }
                    }
                    
                    const score = window.TrafficLights.getTrafficLightSortPriority(lightColor);
                    return { el, score };
                });
                
                scored.sort((a, b) => b.score - a.score);
                scored.forEach(({ el }) => contentDiv.appendChild(el));
            });

            // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –≤—Ä—É—á–Ω—É—é —Å–≤–µ—Ä–Ω—É—Ç—ã
            expandFoldersWithResults();

            highlightSnippets(t);
            applyQueryToViewLinks();
    } else {
        // –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –Ω–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∂—ë–ª—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞
        updateTrafficLightsAfterSearch();
    }
}

function refreshSearchResultsIfActive() {
    const terms = searchInput.value.trim();
    
    if (!terms) {
        // FR-003: –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥ —Ñ–∞–π–ª–∞–º–∏
        document.querySelectorAll('.file-search-results').forEach(el => {
            el.style.display = 'none';
            el.innerHTML = '';
        });
        return;
    }
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Ä–º–∏–Ω—ã - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    performSearch(terms);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–∞–ø–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (—É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
function expandFoldersWithResults() {
    // –°–æ–±–∏—Ä–∞–µ–º –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    const foldersWithResults = new Set();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–∞–ø–∫–∏
    document.querySelectorAll('.folder-container:not(.archive-folder)').forEach(folderContainer => {
        const hasResults = folderContainer.querySelector('.file-search-results[style*="display: block"]');
        if (hasResults) {
            const folderName = folderContainer.querySelector('.folder-name')?.textContent;
            if (folderName) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –ø–∞–ø–∫–∞ –≤—Ä—É—á–Ω—É—é —Å–≤–µ—Ä–Ω—É—Ç–∞
                const savedState = localStorage.getItem('folder-' + folderName);
                if (savedState !== 'collapsed') {
                    folderContainer.classList.remove('collapsed');
                    const contentDiv = folderContainer.querySelector('.folder-content');
                    const toggleIcon = folderContainer.querySelector('.toggle-icon');
                    if (contentDiv) contentDiv.style.display = 'block';
                    if (toggleIcon) toggleIcon.textContent = '‚ñº';
                }
            }
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –ø–∞–ø–∫–∏
    document.querySelectorAll('.folder-container.archive-folder').forEach(archiveContainer => {
        const hasResults = archiveContainer.querySelector('.file-search-results[style*="display: block"]');
        if (hasResults) {
            const archiveId = archiveContainer.id;
            if (archiveId && archiveId.startsWith('archive-')) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∞—Ä—Ö–∏–≤–∞
                const archivePath = archiveId.replace('archive-', '').replace(/-/g, '/');
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∞—Ä—Ö–∏–≤ –≤—Ä—É—á–Ω—É—é —Å–≤–µ—Ä–Ω—É—Ç
                const savedState = localStorage.getItem('archive-' + archivePath);
                if (savedState !== 'collapsed') {
                    const contentDiv = archiveContainer.querySelector('.folder-content');
                    const toggleIcon = archiveContainer.querySelector('.toggle-icon');
                    if (contentDiv) contentDiv.style.display = 'block';
                    if (toggleIcon) toggleIcon.textContent = '‚ñº';
                }
            }
        }
    });
}

searchBtn.addEventListener('click', () => {
    const terms = searchInput.value.trim();
    if (!terms) {
        // –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å = –æ—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–¥ —Ñ–∞–π–ª–∞–º–∏
        fetch('/clear_results', { method: 'POST', headers: { 'Content-Type': 'application/json' } })
            .then(() => {
                document.querySelectorAll('.file-search-results').forEach(el => {
                    el.style.display = 'none';
                    el.innerHTML = '';
                });
                updateFilesList();
                refreshIndexStatus();
            });
        return;
    }
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
    performSearch(terms);
});

// FR-008: "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã" - —É–¥–∞–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∫–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë" —É–¥–∞–ª–µ–Ω–∞)
if (deleteFilesBtn) {
    deleteFilesBtn.addEventListener('click', () => {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏, –∞ —Ç–∞–∫–∂–µ —Å–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!')) {
            return;
        }
        
        // –í—ã–∑—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        fetch('/clear_all', { 
            method: 'POST', 
            headers: { 'Content-Type': 'application/json' } 
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ UI
                document.querySelectorAll('.file-search-results').forEach(el => {
                    el.style.display = 'none';
                    el.innerHTML = '';
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ (–ø–æ–∫–∞–∂–µ—Ç –ø—É—Å—Ç–æ–µ –¥–µ—Ä–µ–≤–æ)
                updateFilesList();
                refreshIndexStatus();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                const message = `–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${data.deleted_count}\n‚Ä¢ –ò–Ω–¥–µ–∫—Å —É–¥–∞–ª—ë–Ω: ${data.index_deleted ? '–¥–∞' : '–Ω–µ—Ç'}`;
                if (data.errors && data.errors.length > 0) {
                    const errorList = data.errors.map(e => `  - ${e.path}: ${e.error}`).join('\n');
                    showMessage(message + `\n‚Ä¢ –û—à–∏–±–∫–∏:\n${errorList}`);
                } else {
                    showMessage(message);
                }
            } else {
                showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
            showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        });
    });
}

// (–ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–∞ ‚Äî –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø—É—Å—Ç–æ–º –ø–æ–∏—Å–∫–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ)

// --- Build Index auto ---
function rebuildIndexWithProgress() {
    const bar = document.getElementById('indexBuildProgress');
    const fill = document.getElementById('indexBuildFill');
    const text = document.getElementById('indexBuildText');
    if (bar) bar.style.display = 'flex';
    if (fill) fill.style.width = '10%';
    if (text) text.textContent = '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞‚Ä¶';
    return fetch('/build_index', { method: 'POST' })
        .then(res => res.json())
        .then(data => {
            if (!data.success) throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞');
            if (fill) fill.style.width = '100%';
            if (text) text.textContent = '–ì–æ—Ç–æ–≤–æ';
            refreshIndexStatus();
            updateFilesList();
        })
        .finally(() => {
            setTimeout(() => { if (bar) bar.style.display = 'none'; if (fill) fill.style.width = '0%'; }, 600);
        });
}

function termsFromInput() {
    const raw = (searchInput && searchInput.value ? searchInput.value : '').trim();
    if (raw) return raw.split(',').map(t => t.trim()).filter(Boolean);
    try {
        const saved = localStorage.getItem('last_search_terms') || '';
        return saved.split(',').map(t => t.trim()).filter(Boolean);
    } catch (_) { return []; }
}

function escapeHtml(s) {
    return s.replace(/[&<>"]+/g, ch => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[ch]));
}

function highlightSnippets(terms) {
    const snippets = document.querySelectorAll('.context-snippet');
    if (!terms || terms.length === 0) return;
    snippets.forEach(sn => {
        let html = sn.innerHTML;
        terms.forEach(term => {
            const re = new RegExp('(' + term.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + ')', 'gi');
            html = html.replace(re, '<span class="highlight">$1</span>');
        });
        sn.innerHTML = html;
    });
}

// --- Modal ---
function showMessage(msg) {
    modalMessage.textContent = msg;
    messageModal.style.display = 'flex';
}
closeModal.addEventListener('click', () => messageModal.style.display = 'none');
window.addEventListener('click', (e) => {
    if (e.target === messageModal) messageModal.style.display = 'none';
});

// --- Folder Toggle ---
function toggleFolder(folderName) {
    const folderId = 'folder-' + folderName;
    const folderElement = document.getElementById(folderId);
    const folderContainer = folderElement.closest('.folder-container');
    
    if (folderContainer.classList.contains('collapsed')) {
        folderContainer.classList.remove('collapsed');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage
        localStorage.setItem('folder-' + folderName, 'expanded');
    } else {
        folderContainer.classList.add('collapsed');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage
        localStorage.setItem('folder-' + folderName, 'collapsed');
    }
}

// --- Restore Folder States ---
function restoreFolderStates() {
    const folderContainers = document.querySelectorAll('.folder-container');
    folderContainers.forEach(container => {
        const folderHeader = container.querySelector('.folder-header');
        if (folderHeader) {
            const folderName = folderHeader.querySelector('.folder-name').textContent;
            const savedState = localStorage.getItem('folder-' + folderName);
            
            if (savedState === 'collapsed') {
                container.classList.add('collapsed');
            } else {
                container.classList.remove('collapsed');
            }
        }
    });
    
    // FR-009: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Ä—Ö–∏–≤–æ–≤ –∏–∑ localStorage
    const archiveFolders = document.querySelectorAll('.folder-container.archive-folder');
    archiveFolders.forEach(archiveDiv => {
        const archiveId = archiveDiv.id;
        if (archiveId && archiveId.startsWith('archive-')) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∞—Ä—Ö–∏–≤–∞ –∏–∑ ID
            const archivePath = archiveId.replace('archive-', '').replace(/-/g, '/');
            const contentDiv = archiveDiv.querySelector('.folder-content');
            const toggleIcon = archiveDiv.querySelector('.toggle-icon');
            
            if (contentDiv) {
                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–ª—é—á–∞
                let savedState = localStorage.getItem('archive-' + archivePath);
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                if (!savedState && archiveDiv.dataset && archiveDiv.dataset.path) {
                    savedState = localStorage.getItem('archive-' + archiveDiv.dataset.path);
                }
                
                if (savedState === 'expanded') {
                    contentDiv.style.display = 'block';
                    if (toggleIcon) toggleIcon.textContent = '‚ñº';
                } else if (savedState === 'collapsed') {
                    contentDiv.style.display = 'none';
                    if (toggleIcon) toggleIcon.textContent = '‚ñ∂';
                }
            }
        }
    });
}

// --- Initial ---
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –ø–æ–∏—Å–∫–∞ –∫–∞–∫ false –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.searchWasPerformed = false;
    
    refreshIndexStatus();
    setInterval(refreshIndexStatus, 8000);
    // –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ API, —á—Ç–æ–±—ã –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã
    updateFilesList().then(() => {
        applyQueryToViewLinks();
        // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è —Ä–∞–Ω–µ–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ DOM, –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã
        if (window.TrafficLights && window.TrafficLights.isSearchPerformed()) {
            updateTrafficLightsAfterSearch();
        }
    });
});

// --- Index status ---
function refreshIndexStatus() {
    if (!indexStatus) return;
    fetch('/index_status')
        .then(res => res.json())
        .then(data => {
            if (!data.exists) {
                indexStatus.textContent = '–°–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª: –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω';
                indexStatus.style.color = '#a00';
            } else {
                const size = (data.size || 0);
                const sizeKb = (size / 1024).toFixed(1);
                const entries = (data.entries == null) ? '‚Äî' : data.entries;
                indexStatus.textContent = `–°–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, ${sizeKb} KB, –∑–∞–ø–∏—Å–µ–π: ${entries}`;
                indexStatus.style.color = '#2a2';
            }
        })
        .catch(() => {
            indexStatus.textContent = '–°–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞';
            indexStatus.style.color = '#a00';
        });
}

// --- Append current terms to /view links ---
function applyQueryToViewLinks() {
    const terms = termsFromInput();
    const anchors = document.querySelectorAll('a.result-file-link');
    anchors.forEach(a => {
        try {
            const url = new URL(a.getAttribute('href'), window.location.origin);
            if (terms.length > 0) {
                url.searchParams.set('q', terms.join(','));
            } else {
                url.searchParams.delete('q');
            }
            a.setAttribute('href', url.pathname + (url.search ? url.search : ''));
        } catch (_) {}
    });
}
