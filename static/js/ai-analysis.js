// AI Analysis Module
(function() {
    'use strict';

    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const aiAnalysisBtn = document.getElementById('aiAnalysisBtn');
    const aiPromptModal = document.getElementById('aiPromptModal');
    const aiPromptClose = document.getElementById('aiPromptClose');
    const aiPromptText = document.getElementById('aiPromptText');
    const savePromptBtn = document.getElementById('savePromptBtn');
    const loadPromptBtn = document.getElementById('loadPromptBtn');
    const optimizeTextBtn = document.getElementById('optimizeTextBtn');
    const cancelAiAnalysisBtn = document.getElementById('cancelAiAnalysisBtn');
    const startAiAnalysisBtn = document.getElementById('startAiAnalysisBtn');
    const selectedFilesCount = document.getElementById('selectedFilesCount');
    const estimatedSize = document.getElementById('estimatedSize');
    
    const aiResultModal = document.getElementById('aiResultModal');
    const aiResultClose = document.getElementById('aiResultClose');
    const aiResultText = document.getElementById('aiResultText');
    const copyResultBtn = document.getElementById('copyResultBtn');
    const saveResultBtn = document.getElementById('saveResultBtn');
    const closeResultBtn = document.getElementById('closeResultBtn');
    
    const aiProgressModal = document.getElementById('aiProgressModal');
    const aiProgressStatus = document.getElementById('aiProgressStatus');
    
    const promptListModal = document.getElementById('promptListModal');
    const promptListClose = document.getElementById('promptListClose');
    const closePromptListBtn = document.getElementById('closePromptListBtn');
    const promptList = document.getElementById('promptList');

    let currentText = '';
    let maxRequestSize = 4096;

    // –≠–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const aiOptimizeModal = document.getElementById('aiOptimizeModal');
    const aiOptimizeClose = document.getElementById('aiOptimizeClose');
    const optPromptText = document.getElementById('optPromptText');
    const optDocsContainer = document.getElementById('optDocsContainer');
    const optInfo = document.getElementById('optInfo');
    const optBackBtn = document.getElementById('optBackBtn');
    const optAutoBtn = document.getElementById('optAutoBtn');
    const optSaveBtn = document.getElementById('optSaveBtn');
    const optDeleteBtn = document.getElementById('optDeleteBtn');
    const optAnalyzeBtn = document.getElementById('optAnalyzeBtn');
    const optCancelBtn = document.getElementById('optCancelBtn');
    
    // –ö–ª–∞—Å—Å –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —É–¥–∞–ª—è–µ–º–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
    const DELETE_CLASS = 'to-delete';
    
    // CSS –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ)
    (function injectOptimizeStyles(){
        const style = document.createElement('style');
        style.textContent = `
            .opt-doc { margin:10px 0; padding:8px; border:1px solid #eee; border-radius:4px; }
            .opt-doc-title { font-weight:bold; margin-bottom:6px; }
            .opt-block { padding:2px 4px; border-radius:3px; cursor:pointer; }
            .opt-block.${DELETE_CLASS} { background-color: #ffe6ea; }
            .opt-sep { margin:8px 0; border-top:1px dashed #ccc; }
            .opt-header { background:#f7f7f7; padding:6px; border-radius:4px; }
        `;
        document.head.appendChild(style);
    })();

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞
    if (aiAnalysisBtn) {
        aiAnalysisBtn.addEventListener('click', function() {
            const selectedFiles = getSelectedFiles();
            
            if (selectedFiles.length === 0) {
                showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–∞–ª–æ—á–∫–∏)', 'error');
                return;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–º–ø—Ç –∏ –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            loadLastPrompt().then(() => {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
                updatePromptInfo(selectedFiles);
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            aiPromptModal.style.display = 'block';
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    if (aiPromptClose) {
        aiPromptClose.addEventListener('click', function() {
            aiPromptModal.style.display = 'none';
        });
    }

    if (cancelAiAnalysisBtn) {
        cancelAiAnalysisBtn.addEventListener('click', function() {
            aiPromptModal.style.display = 'none';
        });
    }

    if (aiResultClose) {
        aiResultClose.addEventListener('click', function() {
            aiResultModal.style.display = 'none';
        });
    }

    if (closeResultBtn) {
        closeResultBtn.addEventListener('click', function() {
            aiResultModal.style.display = 'none';
        });
    }

    if (promptListClose) {
        promptListClose.addEventListener('click', function() {
            promptListModal.style.display = 'none';
        });
    }

    if (closePromptListBtn) {
        closePromptListBtn.addEventListener('click', function() {
            promptListModal.style.display = 'none';
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
    window.addEventListener('click', function(event) {
        if (event.target === aiPromptModal) {
            aiPromptModal.style.display = 'none';
        }
        if (event.target === aiResultModal) {
            aiResultModal.style.display = 'none';
        }
        if (event.target === promptListModal) {
            promptListModal.style.display = 'none';
        }
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getSelectedFiles –∏–∑ script.js
    function getSelectedFiles() {
        return window.getSelectedFiles ? window.getSelectedFiles() : [];
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±–æ—Ä–µ
    function updatePromptInfo(selectedFiles) {
        if (selectedFilesCount) {
            selectedFilesCount.textContent = `–§–∞–π–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–æ: ${selectedFiles.length}`;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
        updateSizeInfo(selectedFiles, aiPromptText.value);
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
    function updateSizeInfo(selectedFiles, prompt) {
        if (!estimatedSize) return;
        
        estimatedSize.textContent = '–ü–æ–¥—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞...';
        
        fetch('/ai_analysis/get_text_size', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                file_paths: selectedFiles,
                prompt: prompt
            })
        })
        .then(response => response.json())
    .then(data => {
            if (data.success) {
                const textSize = data.text_size || 0;
                const promptSize = data.prompt_size || 0;
                const totalSize = data.total_size || 0;
        const maxSize = data.max_size || 4096;
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç, –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Å —Å–µ—Ä–≤–µ—Ä–∞
        maxRequestSize = maxSize;
                const exceeds = data.exceeds_limit || false;
                const excess = data.excess || 0;
                
                let sizeText = `üìÑ –î–æ–∫—É–º–µ–Ω—Ç: ${textSize.toLocaleString()} —Å–∏–º–≤. | üìù –ü—Ä–æ–º–ø—Ç: ${promptSize.toLocaleString()} —Å–∏–º–≤.\n`;
                sizeText += `üìä –ò—Ç–æ–≥–æ: ${totalSize.toLocaleString()} —Å–∏–º–≤. | ‚úÖ –õ–∏–º–∏—Ç: ${maxSize.toLocaleString()} —Å–∏–º–≤.`;
                
                if (exceeds) {
                    sizeText += `\n‚ö†Ô∏è –ü–†–ï–í–´–®–ï–ù–ò–ï: ${excess.toLocaleString()} —Å–∏–º–≤. ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è!`;
                    estimatedSize.style.color = '#d32f2f';
                    estimatedSize.style.fontWeight = 'bold';
                } else {
                    const remaining = maxSize - totalSize;
                    sizeText += `\n‚úì –ó–∞–ø–∞—Å: ${remaining.toLocaleString()} —Å–∏–º–≤.`;
                    estimatedSize.style.color = '#2e7d32';
                    estimatedSize.style.fontWeight = 'normal';
                }
                
                estimatedSize.textContent = sizeText;
            } else {
                estimatedSize.textContent = `–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞: ${data.message}`;
                estimatedSize.style.color = '#d32f2f';
            }
        })
        .catch(error => {
            estimatedSize.textContent = `–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞: ${error}`;
            estimatedSize.style.color = '#d32f2f';
        });
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    function loadLastPrompt() {
        return fetch('/ai_analysis/prompts/last')
            .then(response => response.json())
            .then(data => {
                if (data.success && data.prompt) {
                    aiPromptText.value = data.prompt;
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞:', error);
            });
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç
    if (savePromptBtn) {
        savePromptBtn.addEventListener('click', function() {
            const promptText = aiPromptText.value.trim();
            
            if (!promptText) {
                showMessage('–ü—Ä–æ–º–ø—Ç –ø—É—Å—Ç', 'error');
                return;
            }
            
            const filename = window.prompt('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è):');
            
            if (!filename) {
                return;
            }
            
            fetch('/ai_analysis/prompts/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    prompt: promptText,
                    filename: filename
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showMessage(data.message, 'success');
                } else {
                    showMessage(data.message, 'error');
                }
            })
            .catch(error => {
                showMessage('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: ' + error, 'error');
            });
        });
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç
    if (loadPromptBtn) {
        loadPromptBtn.addEventListener('click', function() {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
            fetch('/ai_analysis/prompts/list')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.prompts && data.prompts.length > 0) {
                        showPromptList(data.prompts);
                    } else {
                        showMessage('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤', 'info');
                    }
                })
                .catch(error => {
                    showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: ' + error, 'error');
                });
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
    function showPromptList(prompts) {
        promptList.innerHTML = '';
        
        prompts.forEach(filename => {
            const item = document.createElement('div');
            item.style.cssText = 'padding: 10px; margin: 5px 0; background-color: #f5f5f5; border-radius: 4px; cursor: pointer; transition: background-color 0.2s;';
            item.textContent = filename;
            
            item.addEventListener('mouseenter', function() {
                this.style.backgroundColor = '#e0e0e0';
            });
            
            item.addEventListener('mouseleave', function() {
                this.style.backgroundColor = '#f5f5f5';
            });
            
            item.addEventListener('click', function() {
                loadPromptFile(filename);
                promptListModal.style.display = 'none';
            });
            
            promptList.appendChild(item);
        });
        
        promptListModal.style.display = 'block';
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞
    function loadPromptFile(filename) {
        fetch(`/ai_analysis/prompts/load/${encodeURIComponent(filename)}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.prompt) {
                    aiPromptText.value = data.prompt;
                    showMessage('–ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω', 'success');
                } else {
                    showMessage(data.message, 'error');
                }
            })
            .catch(error => {
                showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: ' + error, 'error');
            });
    }

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
    if (optimizeTextBtn) {
        optimizeTextBtn.addEventListener('click', async function() {
            const selectedFiles = getSelectedFiles();
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª —Å—Ä–∞–∑—É, —Ç–µ–∫—Å—Ç—ã –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            openOptimizeModal(aiPromptText.value, []);
            optInfo.textContent = selectedFiles.length === 0 ? '–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –û—Ç–º–µ—Ç—å—Ç–µ –≥–∞–ª–æ—á–∫–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–ª–µ–≤–∞.' : '–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...';

            if (selectedFiles.length === 0) {
                showMessage('–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏', 'error');
                return;
            }

            try {
                const res = await fetch('/ai_analysis/get_texts', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ file_paths: selectedFiles })
                });
                const data = await res.json();
                if (!data.success) {
                    optInfo.textContent = data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç—ã';
                    showMessage(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç—ã', 'error');
                    return;
                }
                renderDocsForOptimize(data.docs || []);
                updateOptimizeInfo();
            } catch (e) {
                optInfo.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤';
                showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤: ' + e, 'error');
            }
        });
    }

    // –°–Ω—ç–ø—à–æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–∞–ª–∞ (–¥–ª—è –æ—Ç–º–µ–Ω—ã)
    let optimizeSnapshot = null;

    function openOptimizeModal(promptValue, docs) {
        optPromptText.value = promptValue || '';
        renderDocsForOptimize(docs);
        updateOptimizeInfo();
        aiOptimizeModal.style.display = 'block';
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π HTML, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ª–µ–≥–∫–æ –æ—Ç–∫–∞—Ç–∏—Ç—å
        optimizeSnapshot = {
            prompt: optPromptText.value,
            docsHtml: optDocsContainer.innerHTML
        };
    }

    function renderDocsForOptimize(docs) {
        optDocsContainer.innerHTML = '';
        docs.forEach((doc, idx) => {
            const wrap = document.createElement('div');
            wrap.className = 'opt-doc';
            const title = document.createElement('div');
            title.className = 'opt-doc-title';
            title.textContent = `${idx+1}. ${doc.path}`;
            const body = document.createElement('div');
            // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã/—Å—Ç—Ä–æ–∫–∏
            const lines = (doc.text || '').split(/\n+/);
            lines.forEach(line => {
                const span = document.createElement('span');
                span.className = 'opt-block';
                span.textContent = line;
                span.dataset.length = String(line.length);
                span.addEventListener('click', () => {
                    span.classList.toggle(DELETE_CLASS);
                    updateOptimizeInfo();
                });
                body.appendChild(span);
                body.appendChild(document.createElement('br'));
            });
            wrap.appendChild(title);
            wrap.appendChild(body);
            // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
            const sep = document.createElement('div');
            sep.className = 'opt-sep';
            optDocsContainer.appendChild(wrap);
            optDocsContainer.appendChild(sep);
        });
    }

    function collectOptimizedPlainText() {
        // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤; –±–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        const parts = [];
        const docs = optDocsContainer.querySelectorAll('.opt-doc');
        docs.forEach(doc => {
            const blocks = doc.querySelectorAll('.opt-block');
            const rows = [];
            blocks.forEach(bl => {
                if (!bl.classList.contains(DELETE_CLASS)) {
                    rows.push(bl.textContent || '');
                }
            });
            parts.push(rows.join('\n'));
        });
        return parts.join('\n\n');
    }

    function updateOptimizeInfo() {
        const textOnly = collectOptimizedPlainText();
        const textSize = textOnly.length;
        const promptSize = (optPromptText.value || '').length;
        const total = textSize + promptSize + 2;
        const maxSize = maxRequestSize;
        const exceeds = total > maxSize;
        optInfo.textContent = `üìÑ –î–æ–∫—É–º–µ–Ω—Ç: ${textSize} —Å–∏–º–≤. | üìù –ü—Ä–æ–º–ø—Ç: ${promptSize} —Å–∏–º–≤. | üìä –ò—Ç–æ–≥–æ: ${total} / ${maxSize} —Å–∏–º–≤.` + (exceeds ? `  ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ ${total - maxSize}` : `  ‚úì –û–ö`);
        optInfo.style.color = exceeds ? '#d32f2f' : '#2e7d32';
    }

    // –ê–≤—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (>200 —Å–∏–º–≤–æ–ª–æ–≤)
    if (optAutoBtn) {
        optAutoBtn.addEventListener('click', () => {
            optDocsContainer.querySelectorAll('.opt-block').forEach(bl => {
                const L = parseInt(bl.dataset.length || '0', 10);
                if (L > 200) bl.classList.add(DELETE_CLASS);
            });
            updateOptimizeInfo();
        });
    }

    // –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω–æ–µ
    if (optDeleteBtn) {
        optDeleteBtn.addEventListener('click', () => {
            const count = optDocsContainer.querySelectorAll('.opt-block.'+DELETE_CLASS).length;
            if (count === 0) {
                showMessage('–ù–µ—Ç –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'info');
                return;
            }
            if (!confirm(`–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: ${count}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?`)) return;
            optDocsContainer.querySelectorAll('.opt-block.'+DELETE_CLASS).forEach(bl => bl.remove());
            updateOptimizeInfo();
        });
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–±–æ—á–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª
    if (optSaveBtn) {
        optSaveBtn.addEventListener('click', async () => {
            const docsPayload = [];
            const docs = optDocsContainer.querySelectorAll('.opt-doc');
            docs.forEach(doc => {
                const title = doc.querySelector('.opt-doc-title')?.textContent || '';
                const text = Array.from(doc.querySelectorAll('.opt-block'))
                    .map(bl => bl.textContent || '')
                    .join('\n');
                docsPayload.push({ path: title.replace(/^\d+\.\s*/, ''), text });
            });
            const res = await fetch('/ai_analysis/workspace/save', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt: optPromptText.value, docs: docsPayload })
            });
            const data = await res.json();
            if (data.success) {
                showMessage('–í–æ—Ä–∫—Å–ø–µ–π—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω', 'success');
            } else {
                showMessage(data.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ—Ä–∫—Å–ø–µ–π—Å–∞', 'error');
            }
        });
    }

    // –ù–∞–∑–∞–¥ ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–∫–Ω—É –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    if (optBackBtn) {
        optBackBtn.addEventListener('click', () => {
            aiOptimizeModal.style.display = 'none';
            aiPromptModal.style.display = 'block';
        });
    }

    // –ó–∞–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä
    if (aiOptimizeClose) {
        aiOptimizeClose.addEventListener('click', () => {
            aiOptimizeModal.style.display = 'none';
        });
    }

    // –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Äî –æ—Ç–∫–∞—Ç –∫ —Å–Ω—ç–ø—à–æ—Ç—É
    if (optCancelBtn) {
        optCancelBtn.addEventListener('click', () => {
            if (optimizeSnapshot) {
                optPromptText.value = optimizeSnapshot.prompt;
                optDocsContainer.innerHTML = optimizeSnapshot.docsHtml;
                // –ü–æ–≤–µ—Å–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
                optDocsContainer.querySelectorAll('.opt-block').forEach(span => {
                    span.addEventListener('click', () => {
                        span.classList.toggle(DELETE_CLASS);
                        updateOptimizeInfo();
                    });
                });
                updateOptimizeInfo();
            }
        });
    }

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    if (optPromptText) {
        let t;
        optPromptText.addEventListener('input', () => {
            clearTimeout(t);
            t = setTimeout(updateOptimizeInfo, 300);
        });
    }

    // –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π —Ç–µ–∫—Å—Ç–∞
    if (optAnalyzeBtn) {
        optAnalyzeBtn.addEventListener('click', async () => {
            const selectedFiles = getSelectedFiles();
            const prompt = optPromptText.value.trim();
            const overrideText = collectOptimizedPlainText();
            if (!prompt) { showMessage('–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error'); return; }

            aiOptimizeModal.style.display = 'none';
            aiProgressModal.style.display = 'block';
            aiProgressStatus.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...';

            try {
                const resp = await fetch('/ai_analysis/analyze', {
                    method: 'POST', headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ file_paths: selectedFiles, prompt, max_request_size: maxRequestSize, override_text: overrideText })
                });
                const data = await resp.json();
                aiProgressModal.style.display = 'none';
                if (data.success) {
                    aiResultText.value = data.response;
                    aiResultModal.style.display = 'block';
                } else {
                    aiPromptModal.style.display = 'block';
                    showMessage(data.message || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞', 'error');
                }
            } catch (e) {
                aiProgressModal.style.display = 'none';
                aiPromptModal.style.display = 'block';
                showMessage('–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: ' + e, 'error');
            }
        });
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
    if (aiPromptText) {
        let updateTimeout;
        aiPromptText.addEventListener('input', function() {
            clearTimeout(updateTimeout);
            updateTimeout = setTimeout(() => {
                const selectedFiles = getSelectedFiles();
                if (selectedFiles.length > 0) {
                    updateSizeInfo(selectedFiles, this.value);
                }
            }, 500); // –û–±–Ω–æ–≤–ª—è–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã
        });
    }
    
    // –ù–∞—á–∞—Ç—å AI –∞–Ω–∞–ª–∏–∑
    if (startAiAnalysisBtn) {
        startAiAnalysisBtn.addEventListener('click', function() {
            const selectedFiles = getSelectedFiles();
            const prompt = aiPromptText.value.trim();
            
            if (selectedFiles.length === 0) {
                showMessage('–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã', 'error');
                return;
            }
            
            if (!prompt) {
                showMessage('–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error');
                return;
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–º–ø—Ç–∞
            aiPromptModal.style.display = 'none';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            aiProgressModal.style.display = 'block';
            aiProgressStatus.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...';
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            fetch('/ai_analysis/analyze', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    file_paths: selectedFiles,
                    prompt: prompt,
                    max_request_size: maxRequestSize
                })
            })
            .then(response => response.json())
            .then(data => {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                aiProgressModal.style.display = 'none';
                
                if (data.success) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    aiResultText.value = data.response;
                    aiResultModal.style.display = 'block';
                } else {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    aiPromptModal.style.display = 'block';
                    
                    // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if (data.current_size && data.max_size) {
                        const msg = `${data.message}\n\n–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: ${data.current_size} —Å–∏–º–≤–æ–ª–æ–≤\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${data.max_size} —Å–∏–º–≤–æ–ª–æ–≤\n–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: ${data.excess} —Å–∏–º–≤–æ–ª–æ–≤\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç" –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç.`;
                        showMessage(msg, 'error');
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                        if (data.text) {
                            currentText = data.text;
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –≤ –æ–∫–Ω–µ
                        updateSizeInfo(selectedFiles, prompt);
                    } else {
                        showMessage(data.message, 'error');
                    }
                }
            })
            .catch(error => {
                aiProgressModal.style.display = 'none';
                aiPromptModal.style.display = 'block';
                showMessage('–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: ' + error, 'error');
            });
        });
    }

    // –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    if (copyResultBtn) {
        copyResultBtn.addEventListener('click', function() {
            const text = aiResultText.value;
            
            if (!text) {
                showMessage('–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
                return;
            }
            
            navigator.clipboard.writeText(text)
                .then(() => {
                    showMessage('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
                })
                .catch(error => {
                    showMessage('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error, 'error');
                });
        });
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
    if (saveResultBtn) {
        saveResultBtn.addEventListener('click', function() {
            const text = aiResultText.value;
            
            if (!text) {
                showMessage('–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
                return;
            }
            
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
            const filename = `ai_analysis_${timestamp}.txt`;
            
            const blob = new Blob([text], { type: 'text/plain;charset=utf-8' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showMessage(`–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: ${filename}`, 'success');
        });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é showMessage –∏–∑ script.js
    function showMessage(message, type) {
        if (window.showMessage) {
            window.showMessage(message);
        } else {
            alert(message);
        }
    }

})();
