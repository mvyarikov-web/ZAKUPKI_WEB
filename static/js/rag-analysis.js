// RAG Analysis Module (–ø–æ–¥ —Ç–µ–∫—É—â—É—é —Ä–∞–∑–º–µ—Ç–∫—É index.html)
(function() {
    'use strict';

    // –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –º–æ–¥–∞–ª–∞ AI-–Ω–∞—Å—Ç—Ä–æ–µ–∫
    const ragAnalysisBtn = document.getElementById('ragAnalysisBtn');
        const aiAnalysisBtn = document.getElementById('aiAnalysisBtn');

    // RAG-–º–æ–¥–∞–ª –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏
    const ragModal = document.getElementById('ragModal');
    const ragModalClose = document.getElementById('ragModalClose');
    const ragPromptText = document.getElementById('ragPromptText');
    const ragDocumentsText = document.getElementById('ragDocumentsText');
    const ragModelBtn = document.getElementById('ragModelBtn');
    const ragCurrentModel = document.getElementById('ragCurrentModel');
    const ragInfo = document.getElementById('ragInfo');
    const ragMetrics = document.getElementById('ragMetrics');
    const ragStartBtn = document.getElementById('ragStartBtn');
    const ragDeepMode = document.getElementById('ragDeepMode');
    const ragCancelBtn = document.getElementById('ragCancelBtn');
        const ragSavePromptBtn = document.getElementById('ragSavePromptBtn');
        const ragLoadPromptBtn = document.getElementById('ragLoadPromptBtn');

    // –ú–æ–¥–∞–ª –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏/—Ü–µ–Ω
    const modelSelectModal = document.getElementById('modelSelectModal');
    const modelSelectClose = document.getElementById('modelSelectClose');
    const modelsList = document.getElementById('modelsList');
    const modelSaveBtn = document.getElementById('modelSaveBtn');
    const modelCancelBtn = document.getElementById('modelCancelBtn');
    const usdRubRateInput = document.getElementById('usdRubRate');

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π AI-—Ä–µ–∑—É–ª—å—Ç–∞—Ç)
    const aiResultModal = document.getElementById('aiResultModal');
    const aiResultText = document.getElementById('aiResultText');
    const aiResultClose = document.getElementById('aiResultClose');
    const aiResultError = document.getElementById('aiResultError');
    const aiResultErrorText = document.getElementById('aiResultErrorText');

    // –ú–æ–¥–∞–ª –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞ (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
    const promptListModal = document.getElementById('promptListModal');
    const promptList = document.getElementById('promptList');
    const promptListClose = document.getElementById('promptListClose');
    const closePromptListBtn = document.getElementById('closePromptListBtn');

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    let models = [];
    let selectedModelId = null;
    let debounceTimer = null;
    let analysisTimerInterval = null;
    let analysisStartTime = null;

    function getSelectedFiles() {
        return window.getSelectedFiles ? window.getSelectedFiles() : [];
    }

    function showMessage(message) {
        if (window.showMessage) return window.showMessage(message);
        alert(message);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞
    function startAnalysisTimer() {
        stopAnalysisTimer(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
        analysisStartTime = Date.now();
        
        const updateTimer = () => {
            const elapsed = Math.floor((Date.now() - analysisStartTime) / 1000);
            const minutes = Math.floor(elapsed / 60);
            const seconds = elapsed % 60;
            const timeStr = minutes > 0 
                ? `${minutes}:${seconds.toString().padStart(2, '0')}`
                : `${seconds} —Å–µ–∫`;
            showMessage(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è AI –∞–Ω–∞–ª–∏–∑... (${timeStr})`);
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É –∏ –∑–∞—Ç–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        updateTimer();
        analysisTimerInterval = setInterval(updateTimer, 1000);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞
    function stopAnalysisTimer() {
        if (analysisTimerInterval) {
            clearInterval(analysisTimerInterval);
            analysisTimerInterval = null;
        }
        analysisStartTime = null;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–∫–∞–∑–æ–º –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    function finishAnalysisTimer(success = true) {
        if (analysisStartTime) {
            const elapsed = Math.floor((Date.now() - analysisStartTime) / 1000);
            const minutes = Math.floor(elapsed / 60);
            const seconds = elapsed % 60;
            const timeStr = minutes > 0 
                ? `${minutes} –º–∏–Ω ${seconds} —Å–µ–∫`
                : `${seconds} —Å–µ–∫`;
            
            stopAnalysisTimer();
            
            if (success) {
                showMessage(`–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ ${timeStr}`);
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–æ–º USD/RUB
    function getUsdRubRate() {
        if (!usdRubRateInput) return 0;
        const val = parseFloat(usdRubRateInput.value);
        return (val && val > 0) ? val : 0;
    }
    
    function loadUsdRubRate() {
        try {
            const saved = localStorage.getItem('usd_rub_rate');
            if (saved && usdRubRateInput) {
                usdRubRateInput.value = saved;
            }
        } catch (_) {}
    }
    
    function saveUsdRubRate() {
        try {
            const rate = getUsdRubRate();
            if (rate > 0) {
                localStorage.setItem('usd_rub_rate', rate.toString());
            } else {
                localStorage.removeItem('usd_rub_rate');
            }
        } catch (_) {}
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞/–æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π
    async function loadModels() {
        try {
            const res = await fetch('/ai_rag/models');
            if (!res.ok) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: HTTP', res.status);
                throw new Error(`HTTP ${res.status}`);
            }
            const data = await res.json();
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–æ–¥–µ–ª–∏:', data);
            if (data.success) {
                models = data.models || [];
                selectedModelId = data.default_model || (models[0] && models[0].model_id) || null;
                console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥–µ–ª–µ–π:', models.length, '–í—ã–±—Ä–∞–Ω–∞:', selectedModelId);
                updateCurrentModelLabel();
            } else {
                console.error('–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:', data);
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π:', e);
        }
    }

    function updateCurrentModelLabel() {
        const m = models.find(x => x.model_id === selectedModelId);
        ragCurrentModel.textContent = `–ú–æ–¥–µ–ª—å: ${m ? m.display_name : '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}`;
    }

    function renderModelsList() {
        if (!modelsList) return;
        if (!models || models.length === 0) {
            modelsList.innerHTML = '<p>–ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p>';
            return;
        }

        let html = '';
        models.forEach(m => {
            const checked = m.model_id === selectedModelId ? 'checked' : '';
                            const status = (m.enabled === false) ? '<span style="color:#d32f2f; font-size:12px;">–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞</span>' : '<span style="color:#2e7d32; font-size:12px;">–∞–∫—Ç–∏–≤–Ω–∞</span>';
                            html += `
                                <div style="border:1px solid #ddd; border-radius:6px; padding:10px; margin-bottom:10px;">
                                    <div style="display:flex; gap:10px; align-items:center;">
                                        <input type="radio" name="rag-model" value="${m.model_id}" ${checked} />
                                        <div style="flex:1;">
                                            <div><strong>${m.display_name}</strong> <span style="color:#777; font-size:12px;">(${m.model_id})</span> ¬∑ ${status}</div>
                                            <div style="color:#666; font-size:12px;">–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${Number(m.context_window_tokens || 0).toLocaleString()} —Ç–æ–∫–µ–Ω–æ–≤</div>
                                        </div>
                                        <div style="display:flex; gap:8px; align-items:center;">
                                            <label style="font-size:12px; color:#555;">–í—Ö–æ–¥ (–∑–∞ 1–ú): <input type="number" step="0.0001" min="0" data-price-in="${m.model_id}" value="${m.price_input_per_1m || 0}" style="width:120px;" /></label>
                                            <label style="font-size:12px; color:#555;">–í—ã—Ö–æ–¥ (–∑–∞ 1–ú): <input type="number" step="0.0001" min="0" data-price-out="${m.model_id}" value="${m.price_output_per_1m || 0}" style="width:120px;" /></label>
                                            <label style="font-size:12px; color:#555;">–¢–∞–π–º–∞—É—Ç (—Å–µ–∫): <input type="number" step="1" min="5" max="600" data-timeout="${m.model_id}" value="${m.timeout || 30}" style="width:80px;" title="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏" /></label>
                                            <button class="btn-delete-model" data-model-id="${m.model_id}" style="background:#dc3545; color:white; border:none; padding:6px 12px; border-radius:4px; cursor:pointer; font-size:12px;" title="–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                                        </div>
                                    </div>
                                </div>`;
        });
        modelsList.innerHTML = html;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        modelsList.querySelectorAll('input[name="rag-model"]').forEach(r => {
            r.addEventListener('change', (e) => {
                selectedModelId = e.target.value;
                updateCurrentModelLabel();
                updateRagMetrics();
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –º–æ–¥–µ–ª–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏
        modelsList.querySelectorAll('input[data-price-in], input[data-price-out]').forEach(inp => {
            inp.addEventListener('input', (e) => {
                const modelId = e.target.getAttribute('data-price-in') || e.target.getAttribute('data-price-out');
                const model = models.find(m => m.model_id === modelId);
                if (model) {
                    if (e.target.hasAttribute('data-price-in')) {
                        model.price_input_per_1m = parseFloat(e.target.value) || 0;
                    } else {
                        model.price_output_per_1m = parseFloat(e.target.value) || 0;
                    }
                    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    updateRagMetrics();
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è timeout - –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        modelsList.querySelectorAll('input[data-timeout]').forEach(inp => {
            inp.addEventListener('input', (e) => {
                const modelId = e.target.getAttribute('data-timeout');
                const model = models.find(m => m.model_id === modelId);
                if (model) {
                    let timeout = parseInt(e.target.value) || 30;
                    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 5-600 —Å–µ–∫
                    if (timeout < 5) timeout = 5;
                    if (timeout > 600) timeout = 600;
                    model.timeout = timeout;
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        modelsList.querySelectorAll('.btn-delete-model').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                const modelId = e.target.getAttribute('data-model-id');
                const model = models.find(m => m.model_id === modelId);
                if (!model) return;

                // –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–æ–¥–µ–ª—å
                if (models.length === 1) {
                    alert('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–æ–¥–µ–ª—å. –î–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å.');
                    return;
                }

                // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                if (!confirm(`–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å "${model.display_name}"?\n\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é.`)) {
                    return;
                }

                // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                try {
                    const response = await fetch(`/ai_rag/models/${encodeURIComponent(modelId)}`, {
                        method: 'DELETE'
                    });
                    const result = await response.json();

                    if (!response.ok) {
                        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                        return;
                    }

                    alert('–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');

                    // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
                    await loadModelsConfig();
                    renderModelsList();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏:', error);
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: ' + error.message);
                }
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
        if (usdRubRateInput) {
            usdRubRateInput.addEventListener('input', () => {
                updateRagMetrics();
            });
        }
    }

    async function saveModelPrices() {
        // –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏–Ω–ø—É—Ç–æ–≤
        const inputsIn = modelsList.querySelectorAll('input[data-price-in]');
        const inputsOut = modelsList.querySelectorAll('input[data-price-out]');
        const toSave = [];

        inputsIn.forEach(inp => {
            const id = inp.getAttribute('data-price-in');
            const valIn = parseFloat(inp.value) || 0;
            const outInp = modelsList.querySelector(`input[data-price-out="${id}"]`);
            const valOut = outInp ? (parseFloat(outInp.value) || 0) : 0;
            toSave.push({ model_id: id, price_input_per_1m: valIn, price_output_per_1m: valOut });
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∞–≤–∫–∞ –±—ç–∫–∞)
        for (const item of toSave) {
            await fetch('/ai_rag/models', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(item)
            });
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∫–∞–∫ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (selectedModelId) {
            await fetch('/ai_rag/models/default', {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ model_id: selectedModelId })
            });
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å USD/RUB
        saveUsdRubRate();

        showMessage('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        await loadModels();
        renderModelsList();
        updateRagMetrics();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async function fillDocumentsText() {
        const files = getSelectedFiles();
        if (!files || files.length === 0) return;
        try {
            const res = await fetch('/ai_analysis/get_texts', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ file_paths: files })
            });
            const data = await res.json();
            if (data.success && Array.isArray(data.docs)) {
                const parts = data.docs.map(d => {
                    const p = d && d.path ? d.path : '(–±–µ–∑ –∏–º–µ–Ω–∏)';
                    const t = d && typeof d.text === 'string' ? d.text : '';
                    return `===== ${p} =====\n${t}`;
                });
                ragDocumentsText.value = parts.join('\n\n---\n\n');
            } else {
                ragDocumentsText.value = '';
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤:', e);
            ragDocumentsText.value = '';
        }
    }

    // –ü–æ–¥—Å—á—ë—Ç –º–µ—Ç—Ä–∏–∫ –Ω–∞ –ª–µ—Ç—É (–ª–æ–∫–∞–ª—å–Ω–æ): ~4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω
    function estimateTokens(chars) {
        return Math.max(0, Math.floor(chars / 4));
    }

    function getSelectedModelPrices() {
        const m = models.find(x => x.model_id === selectedModelId);
        return {
            inPrice: m ? (m.price_input_per_1m || 0) : 0,
            outPrice: m ? (m.price_output_per_1m || 0) : 0,
            name: m ? m.display_name : '‚Äî'
        };
    }

    function updateRagMetrics() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const prompt = (ragPromptText.value || '').trim();
            const docs = (ragDocumentsText.value || '').trim();

            const promptChars = prompt.length;
            const docsChars = docs.length;
            const totalChars = promptChars + docsChars;
            const inputTokens = estimateTokens(totalChars);
            const deep = !!(ragDeepMode && ragDeepMode.checked);
            const expectedOutput = deep ? 1200 : 600; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤—ã–≤–æ–¥–∞ –≤ –≥–ª—É–±–æ–∫–∏–π —Ä–µ–∂–∏–º
            const totalTokens = inputTokens + expectedOutput;

            const { inPrice, outPrice, name } = getSelectedModelPrices();
            let info = `–ú–æ–¥–µ–ª—å: ${name}. –°–∏–º–≤–æ–ª—ã: –ø—Ä–æ–º–ø—Ç ${promptChars.toLocaleString()}, –¥–æ–∫—É–º–µ–Ω—Ç—ã ${docsChars.toLocaleString()}, –≤—Å–µ–≥–æ ${totalChars.toLocaleString()}. –¢–æ–∫–µ–Ω—ã (–æ—Ü–µ–Ω–∫–∞): –≤—Ö–æ–¥ ${inputTokens.toLocaleString()}, –≤—ã—Ö–æ–¥ ${expectedOutput.toLocaleString()}, –≤—Å–µ–≥–æ ${totalTokens.toLocaleString()}.`;

            if (inPrice > 0 || outPrice > 0) {
                const costIn = (inputTokens / 1_000_000) * inPrice;
                const costOut = (expectedOutput / 1_000_000) * outPrice;
                const totalCost = costIn + costOut;
                info += ` –°—Ç–æ–∏–º–æ—Å—Ç—å (–æ—Ü–µ–Ω–∫–∞): –≤—Ö–æ–¥ $${costIn.toFixed(4)}, –≤—ã—Ö–æ–¥ $${costOut.toFixed(4)}, –≤—Å–µ–≥–æ $${totalCost.toFixed(4)}`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç –≤ —Ä—É–±–ª–∏, –µ—Å–ª–∏ –∫—É—Ä—Å –∑–∞–¥–∞–Ω
                const rate = getUsdRubRate();
                if (rate > 0) {
                    const rubIn = costIn * rate;
                    const rubOut = costOut * rate;
                    const rubTotal = totalCost * rate;
                    info += ` (${rubIn.toFixed(2)}‚ÇΩ / ${rubOut.toFixed(2)}‚ÇΩ / ${rubTotal.toFixed(2)}‚ÇΩ)`;
                }
                info += '.';
            } else {
                info += ' –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ –º–æ–¥–µ–ª–µ–π.';
            }

            ragMetrics.textContent = info;
        }, 250);
    }

    // –ê–Ω–∞–ª–∏–∑ (—á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥ /ai_rag/analyze)
    async function startAnalysis() {
        const files = getSelectedFiles();
        const prompt = (ragPromptText.value || '').trim();
        if (!prompt) {
            return showMessage('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç');
        }
        if (!files || files.length === 0) {
            return showMessage('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        const wasModalOpen = ragModal.style.display === 'block';
        ragModal.style.display = 'none';
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        startAnalysisTimer();
        
        try {
            const res = await fetch('/ai_rag/analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    file_paths: files,
                    prompt,
                    model_id: selectedModelId,
                    top_k: (ragDeepMode && ragDeepMode.checked) ? 8 : 5,
                    max_output_tokens: (ragDeepMode && ragDeepMode.checked) ? 2500 : 1500,
                    temperature: 0.3
                })
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON
            const contentType = res.headers.get('content-type');
            let data;
            
            if (!contentType || !contentType.includes('application/json')) {
                // –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏)
                stopAnalysisTimer();
                const text = await res.text();
                showMessage('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + text.substring(0, 200));
                if (wasModalOpen) {
                    ragModal.style.display = 'block';
                }
                return;
            }
            
            try {
                data = await res.json();
            } catch (jsonErr) {
                stopAnalysisTimer();
                const text = await res.text();
                showMessage('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ' + text.substring(0, 200));
                if (wasModalOpen) {
                    ragModal.style.display = 'block';
                }
                return;
            }
            if (data.success) {
                // –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ HTML –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const result = data.result;
                
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º HTML –≤–µ—Ä—Å–∏—é
                try {
                    const htmlRes = await fetch('/ai_rag/render_html', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ result: result })
                    });
                    const htmlData = await htmlRes.json();
                    
                    if (htmlData.success && htmlData.html) {
                        // –°–æ–∑–¥–∞–µ–º div –¥–ª—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        const resultDiv = document.createElement('div');
                        resultDiv.innerHTML = htmlData.html;
                        resultDiv.style.cssText = 'padding: 15px; max-height: 500px; overflow-y: auto; background: white; border: 1px solid #dee2e6; border-radius: 6px;';
                        
                        // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                        const container = document.getElementById('aiResultContainer');
                        if (container) {
                            container.innerHTML = '';
                            container.appendChild(resultDiv);
                        }
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                        window._lastAnalysisResult = result;
                    } else {
                        // Fallback –Ω–∞ plain text
                        const text = typeof result === 'string' ? result : JSON.stringify(result, null, 2);
                        aiResultText.value = text;
                    }
                } catch (htmlErr) {
                    console.error('–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ HTML:', htmlErr);
                    // Fallback –Ω–∞ plain text
                    const text = typeof result === 'string' ? result : JSON.stringify(result, null, 2);
                    aiResultText.value = text;
                }
                
                aiResultModal.style.display = 'block';
                finishAnalysisTimer(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            } else {
                // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–∞–ª –æ–±—Ä–∞—Ç–Ω–æ
                stopAnalysisTimer();
                showMessage(data.message || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
                if (wasModalOpen) {
                    ragModal.style.display = 'block';
                }
            }
        } catch (e) {
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–∞–ª –æ–±—Ä–∞—Ç–Ω–æ
            stopAnalysisTimer();
            showMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + e.message);
            if (wasModalOpen) {
                ragModal.style.display = 'block';
            }
        }
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    async function openRag() {
        const files = getSelectedFiles();
        if (!files || files.length === 0) {
            return showMessage('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–≥–∞–ª–æ—á–∫–∏ —Å–ª–µ–≤–∞ –æ—Ç —Ñ–∞–π–ª–æ–≤)');
        }
        await loadModels();
        await fillDocumentsText();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–º–ø—Ç –∏–∑ localStorage, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        try {
            const lastPrompt = localStorage.getItem('last_loaded_prompt');
            if (lastPrompt && !ragPromptText.value.trim()) {
                ragPromptText.value = lastPrompt;
            }
        } catch (_) {}
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å USD/RUB –∏–∑ localStorage –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É–±–ª–µ–π
        loadUsdRubRate();
        
        updateRagMetrics();
        try { autoResize(ragPromptText, 4); autoResize(ragDocumentsText, 10); } catch (_) {}
        ragModal.style.display = 'block';
    }
    if (ragAnalysisBtn) ragAnalysisBtn.addEventListener('click', openRag);
    if (aiAnalysisBtn) aiAnalysisBtn.addEventListener('click', openRag);

    if (ragModalClose) {
        ragModalClose.addEventListener('click', () => ragModal.style.display = 'none');
    }
    if (ragCancelBtn) {
        ragCancelBtn.addEventListener('click', () => ragModal.style.display = 'none');
    }
    if (ragModelBtn) {
        ragModelBtn.addEventListener('click', async () => {
            try {
                const res = await fetch('/ai_rag/status');
                const st = await res.json();
                if (st && st.success) {
                    showMessage(st.api_key_configured ? 'API-–∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω' : 'API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
            } catch (_) {}
            await loadModels();
            loadUsdRubRate(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å –∏–∑ localStorage
            renderModelsList();
            modelSelectModal.style.display = 'block';
        });
    }
        if (ragAnalysisBtn) ragAnalysisBtn.addEventListener('click', openRag);
        if (aiAnalysisBtn) aiAnalysisBtn.addEventListener('click', openRag);
    if (modelSelectClose) {
        modelSelectClose.addEventListener('click', () => modelSelectModal.style.display = 'none');
    }
    if (modelCancelBtn) {
        modelCancelBtn.addEventListener('click', () => modelSelectModal.style.display = 'none');
    }
    if (modelSaveBtn) {
        modelSaveBtn.addEventListener('click', async () => {
            await saveModelPrices();
            modelSelectModal.style.display = 'none';
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ ¬´–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª–∏¬ª - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
    const modelRefreshBtn = document.getElementById('modelRefreshBtn');
    const addModelsModal = document.getElementById('addModelsModal');
    const addModelsClose = document.getElementById('addModelsClose');
    const addModelsCancelBtn = document.getElementById('addModelsCancelBtn');
    const addModelsConfirmBtn = document.getElementById('addModelsConfirmBtn');
    const newModelsList = document.getElementById('newModelsList');
    const addModelsStatus = document.getElementById('addModelsStatus');
    const addModelsStatusText = document.getElementById('addModelsStatusText');
    
    if (modelRefreshBtn && addModelsModal) {
        modelRefreshBtn.addEventListener('click', async () => {
            // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            addModelsModal.style.display = 'block';
            addModelsStatus.style.display = 'none';
            newModelsList.innerHTML = '<p style="text-align: center; color: #777;">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...</p>';
            
            try {
                // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ OpenAI
                const res = await fetch('/ai_rag/models/available', { method: 'GET' });
                if (!res.ok) {
                    throw new Error(`HTTP ${res.status}: ${res.statusText}`);
                }
                const data = await res.json();
                
                if (!data.success) {
                    throw new Error(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π');
                }
                
                const availableModels = data.models || [];
                const currentModels = models.map(m => m.model_id);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç
                const newModels = availableModels.filter(m => !currentModels.includes(m.model_id));
                
                if (newModels.length === 0) {
                    newModelsList.innerHTML = '<p style="text-align: center; color: #777;">–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>';
                } else {
                    // –†–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏—Å–æ–∫ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
                    let html = '';
                    newModels.forEach(m => {
                        html += `
                            <div style="border: 1px solid #ddd; border-radius: 6px; padding: 10px; margin-bottom: 10px;">
                                <label style="display: flex; align-items: flex-start; gap: 10px; cursor: pointer;">
                                    <input type="checkbox" class="new-model-checkbox" data-model-id="${m.model_id}" />
                                    <div style="flex: 1;">
                                        <div><strong>${m.display_name || m.model_id}</strong></div>
                                        <div style="font-size: 12px; color: #666; margin-top: 4px;">
                                            ID: ${m.model_id}
                                        </div>
                                        ${m.context_window_tokens ? `<div style="font-size: 12px; color: #666;">–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${Number(m.context_window_tokens).toLocaleString()} —Ç–æ–∫–µ–Ω–æ–≤</div>` : ''}
                                    </div>
                                </label>
                            </div>
                        `;
                    });
                    newModelsList.innerHTML = html;
                }
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π:', e);
                newModelsList.innerHTML = `<p style="text-align: center; color: #d32f2f;">–û—à–∏–±–∫–∞: ${e.message}</p>`;
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
        if (addModelsClose) {
            addModelsClose.addEventListener('click', () => addModelsModal.style.display = 'none');
        }
        if (addModelsCancelBtn) {
            addModelsCancelBtn.addEventListener('click', () => addModelsModal.style.display = 'none');
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        if (addModelsConfirmBtn) {
            addModelsConfirmBtn.addEventListener('click', async () => {
                const checkboxes = newModelsList.querySelectorAll('.new-model-checkbox:checked');
                const selectedIds = Array.from(checkboxes).map(cb => cb.getAttribute('data-model-id'));
                
                if (selectedIds.length === 0) {
                    alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–¥–µ–ª—å');
                    return;
                }
                
                // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                try {
                    addModelsStatus.style.display = 'block';
                    addModelsStatusText.textContent = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...';
                    
                    const res = await fetch('/ai_rag/models/add', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ model_ids: selectedIds })
                    });
                    
                    if (!res.ok) {
                        throw new Error(`HTTP ${res.status}: ${res.statusText}`);
                    }
                    
                    const data = await res.json();
                    
                    if (!data.success) {
                        throw new Error(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª–∏');
                    }
                    
                    addModelsStatusText.textContent = `–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${data.added || 0}`;
                    
                    // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
                    await loadModelsConfig();
                    renderModelsList();
                    
                    // –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫
                    setTimeout(() => {
                        addModelsModal.style.display = 'none';
                    }, 1500);
                    
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π:', e);
                    addModelsStatusText.textContent = `–û—à–∏–±–∫–∞: ${e.message}`;
                    addModelsStatus.style.background = '#ffebee';
                }
            });
        }
    }
    
    if (ragStartBtn) {
        ragStartBtn.addEventListener('click', startAnalysis);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–æ–¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (aiResultClose) {
        aiResultClose.addEventListener('click', () => aiResultModal.style.display = 'none');
    }
    
    const closeResultBtn = document.getElementById('closeResultBtn');
    const copyResultBtn = document.getElementById('copyResultBtn');
    const saveResultBtn = document.getElementById('saveResultBtn');
    const openNewTabBtn = document.getElementById('openNewTabBtn');
    const exportDocxBtn = document.getElementById('exportDocxBtn');
    
    if (closeResultBtn) {
        closeResultBtn.addEventListener('click', () => aiResultModal.style.display = 'none');
    }
    
    if (copyResultBtn) {
        copyResultBtn.addEventListener('click', function() {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ –∏–∑ textarea
            let text = '';
            
            if (window._lastAnalysisResult && window._lastAnalysisResult.answer) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π Markdown —Ç–µ–∫—Å—Ç
                const result = window._lastAnalysisResult;
                text = `–ú–æ–¥–µ–ª—å: ${result.model}\n`;
                text += `–°—Ç–æ–∏–º–æ—Å—Ç—å: $${result.cost?.total || 0}\n`;
                if (result.cost?.total_rub) {
                    text += `–í —Ä—É–±–ª—è—Ö: ‚ÇΩ${result.cost.total_rub} (–ø–æ –∫—É—Ä—Å—É $${result.cost.usd_to_rub_rate})\n`;
                }
                text += `–¢–æ–∫–µ–Ω—ã: ${result.usage?.total_tokens || 0}\n`;
                text += `\n${'='.repeat(80)}\n\n`;
                text += result.answer;
            } else {
                text = aiResultText.value;
            }
            
            if (!text) {
                showMessage('–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
                return;
            }
            
            navigator.clipboard.writeText(text)
                .then(() => showMessage('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞'))
                .catch(error => showMessage('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error));
        });
    }
    
    if (saveResultBtn) {
        saveResultBtn.addEventListener('click', function() {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ –∏–∑ textarea
            let text = '';
            
            if (window._lastAnalysisResult && window._lastAnalysisResult.answer) {
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
                const result = window._lastAnalysisResult;
                text = `${'='.repeat(80)}\n`;
                text += `AI –ê–ù–ê–õ–ò–ó\n`;
                text += `${'='.repeat(80)}\n`;
                text += `–ú–æ–¥–µ–ª—å: ${result.model}\n`;
                text += `–°—Ç–æ–∏–º–æ—Å—Ç—å: $${result.cost?.total || 0} (–≤—Ö–æ–¥: $${result.cost?.input || 0}, –≤—ã—Ö–æ–¥: $${result.cost?.output || 0})\n`;
                if (result.cost?.total_rub) {
                    text += `–í —Ä—É–±–ª—è—Ö: ‚ÇΩ${result.cost.total_rub} (–≤—Ö–æ–¥: ‚ÇΩ${result.cost.input_rub}, –≤—ã—Ö–æ–¥: ‚ÇΩ${result.cost.output_rub}) –ø–æ –∫—É—Ä—Å—É $${result.cost.usd_to_rub_rate}\n`;
                }
                text += `–¢–æ–∫–µ–Ω—ã: ${result.usage?.total_tokens || 0} (–≤—Ö–æ–¥: ${result.usage?.input_tokens || 0}, –≤—ã—Ö–æ–¥: ${result.usage?.output_tokens || 0})\n`;
                text += `${'='.repeat(80)}\n\n`;
                text += result.answer;
            } else {
                text = aiResultText.value;
            }
            if (!text) {
                showMessage('–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                return;
            }
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
            const filename = `ai_analysis_${timestamp}.txt`;
            const blob = new Blob([text], { type: 'text/plain;charset=utf-8' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            showMessage(`–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${filename}`);
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ"
    if (openNewTabBtn) {
        openNewTabBtn.addEventListener('click', async function() {
            if (!window._lastAnalysisResult || !window._lastAnalysisResult.answer) {
                showMessage('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                return;
            }
            
            try {
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º HTML-–≤–µ—Ä—Å–∏—é –¥–ª—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
                const res = await fetch('/ai_rag/render_html', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ result: window._lastAnalysisResult })
                });
                
                const data = await res.json();
                
                if (data.success && data.html) {
                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ —Å –ø–æ–ª–Ω—ã–º HTML
                    const newWindow = window.open('', '_blank');
                    if (newWindow) {
                        newWindow.document.write(`
                            <!DOCTYPE html>
                            <html lang="ru">
                            <head>
                                <meta charset="UTF-8">
                                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                <title>–†–µ–∑—É–ª—å—Ç–∞—Ç AI –∞–Ω–∞–ª–∏–∑–∞</title>
                                <style>
                                    body {
                                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                                        max-width: 900px;
                                        margin: 40px auto;
                                        padding: 20px;
                                        background: #f5f5f5;
                                    }
                                    .content {
                                        background: white;
                                        padding: 30px;
                                        border-radius: 8px;
                                        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                                    }
                                    @media print {
                                        body { background: white; margin: 0; }
                                        .content { box-shadow: none; padding: 0; }
                                    }
                                </style>
                            </head>
                            <body>
                                <div class="content">
                                    ${data.html}
                                </div>
                            </body>
                            </html>
                        `);
                        newWindow.document.close();
                        showMessage('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ');
                    } else {
                        showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–µ –æ–∫–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.');
                    }
                } else {
                    showMessage(data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è HTML');
                }
            } catch (err) {
                showMessage('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ: ' + err.message);
            }
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ DOCX"
    if (exportDocxBtn) {
        exportDocxBtn.addEventListener('click', async function() {
            if (!window._lastAnalysisResult || !window._lastAnalysisResult.answer) {
                showMessage('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
                return;
            }
            
            try {
                showMessage('–°–æ–∑–¥–∞–Ω–∏–µ DOCX —Ñ–∞–π–ª–∞...');
                
                const res = await fetch('/ai_rag/export_docx', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ result: window._lastAnalysisResult })
                });
                
                if (res.ok) {
                    // –ü–æ–ª—É—á–∞–µ–º blob –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    const blob = await res.blob();
                    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
                    const filename = `ai_analysis_${timestamp}.docx`;
                    
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = filename;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                    
                    showMessage(`DOCX —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${filename}`);
                } else {
                    const errorText = await res.text();
                    showMessage('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ' + errorText.substring(0, 100));
                }
            } catch (err) {
                showMessage('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ DOCX: ' + err.message);
            }
        });
    }

    // –ñ–∏–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    if (ragPromptText) ragPromptText.addEventListener('input', updateRagMetrics);
    if (ragDocumentsText) ragDocumentsText.addEventListener('input', updateRagMetrics);
        // –ñ–∏–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ + –∞–≤—Ç–æ-—Ä–µ—Å–∞–π–∑
        function autoResize(el, minRows) {
            if (!el) return;
            el.style.height = 'auto';
            const lh = 18; // px
            const rows = Math.max(minRows, Math.ceil(el.scrollHeight / lh));
            el.style.height = (rows * lh) + 'px';
        }
        if (ragPromptText) ragPromptText.addEventListener('input', () => { updateRagMetrics(); autoResize(ragPromptText, 4); });
        if (ragDocumentsText) ragDocumentsText.addEventListener('input', () => { updateRagMetrics(); autoResize(ragDocumentsText, 10); });

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å/–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≤ RAG
        if (ragSavePromptBtn) {
            ragSavePromptBtn.addEventListener('click', async () => {
                const prompt = (ragPromptText.value || '').trim();
                if (!prompt) return showMessage('–ü—Ä–æ–º–ø—Ç –ø—É—Å—Ç');
                const filename = window.prompt('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è):');
                if (!filename) return;
                try {
                    const res = await fetch('/ai_analysis/prompts/save', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ prompt, filename }) });
                    const data = await res.json();
                    showMessage(data.message || (data.success ? '–ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω' : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç'));
                } catch (e) { showMessage('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + e.message); }
            });
        }
        if (ragLoadPromptBtn) {
            ragLoadPromptBtn.addEventListener('click', async () => {
                try {
                    const res = await fetch('/ai_analysis/prompts/list');
                    const data = await res.json();
                    if (!data.success || !Array.isArray(data.prompts) || data.prompts.length === 0) {
                        return showMessage('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤');
                    }
                    // –û—á–∏—Å—Ç–∏—Ç—å –∏ –Ω–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏ —Å –ø—Ä–µ–≤—å—é
                    if (!promptList || !promptListModal) return;
                    promptList.innerHTML = '';
                    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–ø—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç (–¥–ª—è –ø—Ä–µ–≤—å—é) ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                    for (const filename of data.prompts) {
                        let preview = '';
                        try {
                            const r = await fetch('/ai_analysis/prompts/load/' + encodeURIComponent(filename));
                            const ld = await r.json();
                            if (ld.success && typeof ld.prompt === 'string') {
                                // –ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü (–¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏) –∏–ª–∏ –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                                const para = ld.prompt.split(/\n\s*\n/)[0] || ld.prompt;
                                preview = para.trim().slice(0, 200);
                            }
                        } catch (_) {}

                        const item = document.createElement('div');
                        item.style.cssText = 'padding:10px; margin:6px 0; background:#f5f5f5; border-radius:6px; cursor:pointer;';
                        const title = document.createElement('div');
                        title.style.cssText = 'font-weight:600;';
                        title.textContent = filename;
                        const desc = document.createElement('div');
                        desc.style.cssText = 'font-size:12px; color:#555; margin-top:4px; white-space:pre-wrap;';
                        desc.textContent = preview || '(–ø—É—Å—Ç–æ)';
                        item.appendChild(title);
                        item.appendChild(desc);
                        item.addEventListener('click', async () => {
                            try {
                                const resp = await fetch('/ai_analysis/prompts/load/' + encodeURIComponent(filename));
                                const ld = await resp.json();
                                if (ld.success) {
                                    ragPromptText.value = ld.prompt || '';
                                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ localStorage
                                    try {
                                        localStorage.setItem('last_loaded_prompt', ld.prompt || '');
                                        localStorage.setItem('last_loaded_prompt_filename', filename);
                                    } catch (_) {}
                                    updateRagMetrics();
                                    autoResize(ragPromptText, 4);
                                    promptListModal.style.display = 'none';
                                } else {
                                    showMessage(ld.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç');
                                }
                            } catch (e) { showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + e.message); }
                        });
                        promptList.appendChild(item);
                    }
                    promptListModal.style.display = 'block';
                } catch (e) { showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: ' + e.message); }
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
        if (promptListClose) promptListClose.addEventListener('click', () => promptListModal.style.display = 'none');
        if (closePromptListBtn) closePromptListBtn.addEventListener('click', () => promptListModal.style.display = 'none');

})();
