#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ models.json
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
"""
import json
import os
import sys
import time
from openai import OpenAI

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–µ–π
MODELS_FILE = os.path.join(os.path.dirname(__file__), '..', 'index', 'models.json')

# –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
TEST_PROMPT = "–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)."

def test_model(client, model_id, timeout=30):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å system role (o-–º–æ–¥–µ–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç)
        supports_system = not model_id.startswith('o')
        
        if supports_system:
            messages = [
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫."},
                {"role": "user", "content": TEST_PROMPT}
            ]
        else:
            messages = [
                {"role": "user", "content": TEST_PROMPT}
            ]
        
        response = client.chat.completions.create(
            model=model_id,
            messages=messages,
            max_tokens=100,
            timeout=timeout
        )
        
        elapsed = time.time() - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç
        if response.choices and response.choices[0].message.content:
            return {
                'success': True,
                'elapsed': elapsed,
                'tokens': response.usage.total_tokens if response.usage else 0
            }
        else:
            return {'success': False, 'error': '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç'}
            
    except Exception as e:
        return {'success': False, 'error': str(e)}

def recommend_timeout(elapsed_time):
    """
    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ç–∞–π–º–∞—É—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    """
    if elapsed_time < 2:
        return 20  # –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
    elif elapsed_time < 5:
        return 30  # –°—Ä–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å
    elif elapsed_time < 10:
        return 45  # –ú–µ–¥–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    elif elapsed_time < 20:
        return 60  # –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å (reasoning)
    else:
        return 90  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–∞—è

def main():
    print("=" * 80)
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏–∑ models.json")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ config.py
    api_key = os.environ.get('OPENAI_API_KEY')
    
    if not api_key:
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ webapp/config.py
        try:
            sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
            from webapp.config import Config
            api_key = Config.OPENAI_API_KEY
        except Exception as e:
            pass
    
    if not api_key:
        print("‚ùå –û–®–ò–ë–ö–ê: OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ webapp/config.py")
        return False
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å models.json
    if not os.path.exists(MODELS_FILE):
        print(f"‚ùå –§–∞–π–ª {MODELS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(MODELS_FILE, 'r', encoding='utf-8') as f:
        config = json.load(f)
    
    models = config.get('models', [])
    if not models:
        print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
    print()
    
    # –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç OpenAI
    client = OpenAI(api_key=api_key)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
    results = []
    updates = []
    
    for i, model in enumerate(models, 1):
        model_id = model['model_id']
        current_timeout = model.get('timeout', 30)
        
        print(f"[{i}/{len(models)}] –¢–µ—Å—Ç–∏—Ä—É—é {model_id}...")
        print(f"  –¢–µ–∫—É—â–∏–π —Ç–∞–π–º–∞—É—Ç: {current_timeout} —Å–µ–∫")
        
        result = test_model(client, model_id, timeout=current_timeout)
        
        if result['success']:
            elapsed = result['elapsed']
            tokens = result['tokens']
            recommended_timeout = recommend_timeout(elapsed)
            
            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            print(f"  ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {elapsed:.2f} —Å–µ–∫")
            print(f"  üî¢ –¢–æ–∫–µ–Ω—ã: {tokens}")
            print(f"  üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∞–π–º–∞—É—Ç: {recommended_timeout} —Å–µ–∫")
            
            if recommended_timeout != current_timeout:
                print(f"  ‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∞—É—Ç: {current_timeout} ‚Üí {recommended_timeout}")
                updates.append({
                    'model_id': model_id,
                    'old_timeout': current_timeout,
                    'new_timeout': recommended_timeout
                })
                model['timeout'] = recommended_timeout
            
            results.append({
                'model_id': model_id,
                'status': 'OK',
                'elapsed': elapsed,
                'tokens': tokens,
                'timeout': recommended_timeout
            })
        else:
            error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            print(f"  ‚ùå –û–®–ò–ë–ö–ê: {error}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å –≤–æ–æ–±—â–µ
            if 'does not exist' in error.lower() or 'model_not_found' in error.lower():
                print(f"  ‚ö†Ô∏è  –ú–æ–¥–µ–ª—å {model_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ OpenAI API!")
                print(f"  üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é")
            
            results.append({
                'model_id': model_id,
                'status': 'FAILED',
                'error': error
            })
        
        print()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("=" * 80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 80)
    
    successful = sum(1 for r in results if r['status'] == 'OK')
    failed = sum(1 for r in results if r['status'] == 'FAILED')
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}/{len(models)}")
    print(f"‚ùå –û—à–∏–±–∫–∏: {failed}/{len(models)}")
    print()
    
    if updates:
        print("üîÑ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –¢–ê–ô–ú–ê–£–¢–û–í:")
        for update in updates:
            print(f"  ‚Ä¢ {update['model_id']}: {update['old_timeout']} ‚Üí {update['new_timeout']} —Å–µ–∫")
        print()
        
        # –°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = input("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–∞–π–º–∞—É—Ç—ã? (y/n): ").lower().strip()
        if response == 'y':
            # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_file = MODELS_FILE + '.backup'
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
            
            # –û–±–Ω–æ–≤–∏—Ç—å models.json
            with open(MODELS_FILE, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –§–∞–π–ª {MODELS_FILE} –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            print("‚è≠Ô∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    else:
        print("‚úÖ –í—Å–µ —Ç–∞–π–º–∞—É—Ç—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    
    return successful > 0

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
