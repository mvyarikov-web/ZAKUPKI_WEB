"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ Markdown –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π HTML."""
import bleach
from markdown import markdown


def render_analysis_result(result_dict: dict) -> str:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML.
    
    Args:
        result_dict: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ answer, cost, usage, model
        
    Returns:
        HTML —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    answer = result_dict.get('answer', '')
    cost = result_dict.get('cost', {})
    usage = result_dict.get('usage', {})
    model = result_dict.get('model', 'unknown')
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML
    answer_html = markdown(
        answer,
        extensions=['extra', 'nl2br', 'sane_lists', 'tables']
    )
    
    # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è HTML (–∑–∞—â–∏—Ç–∞ –æ—Ç XSS)
    safe_html = bleach.clean(
        answer_html,
        tags=[
            'p', 'br', 'strong', 'em', 'u', 'a', 'ul', 'ol', 'li',
            'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
            'table', 'thead', 'tbody', 'tr', 'th', 'td',
            'blockquote', 'code', 'pre', 'hr', 'div', 'span'
        ],
        attributes={
            '*': ['class', 'id'],
            'a': ['href', 'title', 'target'],
            'table': ['border', 'cellpadding', 'cellspacing']
        },
        strip=True
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    usd_to_rub = cost.get('usd_to_rub_rate', 95.0)
    
    meta_html = f"""
    <div style="background: #f8f9fa; padding: 12px; border-radius: 6px; margin-bottom: 20px; font-size: 14px; border-left: 4px solid #007bff;">
        <div style="margin-bottom: 8px;">
            <strong>–ú–æ–¥–µ–ª—å:</strong> <span style="color: #007bff;">{model}</span>
        </div>
        <div style="margin-bottom: 8px;">
            <strong>–°—Ç–æ–∏–º–æ—Å—Ç—å USD:</strong> 
            <span style="color: #28a745;">${cost.get('total', 0):.6f}</span>
            <span style="color: #6c757d; font-size: 12px;">
                (–≤—Ö–æ–¥: ${cost.get('input', 0):.6f}, –≤—ã—Ö–æ–¥: ${cost.get('output', 0):.6f})
            </span>
        </div>
        <div style="margin-bottom: 8px; padding: 10px; background: linear-gradient(135deg, #e7f5e7 0%, #d4edda 100%); border-radius: 6px; border: 2px solid #28a745; box-shadow: 0 2px 4px rgba(40,167,69,0.2);">
            <strong style="font-size: 15px;">üí∞ –ò—Ç–æ–≥–æ –≤ —Ä—É–±–ª—è—Ö:</strong> 
            <span style="color: #155724; font-size: 18px; font-weight: bold;">‚ÇΩ{cost.get('total_rub', 0):.2f}</span>
            <span style="color: #6c757d; font-size: 11px; display: block; margin-top: 4px;">
                –ø–æ –∫—É—Ä—Å—É ${usd_to_rub:.2f} ‚ÇΩ/$ (–≤—Ö–æ–¥: ‚ÇΩ{cost.get('input_rub', 0):.2f}, –≤—ã—Ö–æ–¥: ‚ÇΩ{cost.get('output_rub', 0):.2f})
            </span>
        </div>
        <div>
            <strong>–¢–æ–∫–µ–Ω—ã:</strong> 
            <span style="color: #17a2b8;">{usage.get('total_tokens', 0):,}</span>
            <span style="color: #6c757d; font-size: 12px;">
                (–≤—Ö–æ–¥: {usage.get('input_tokens', 0):,}, –≤—ã—Ö–æ–¥: {usage.get('output_tokens', 0):,})
            </span>
        </div>
    </div>
    <hr style="margin: 20px 0; border: none; border-top: 1px solid #dee2e6;"/>
    """
    
    # –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content_style = """
    <div style="line-height: 1.6; color: #212529; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;">
    """
    
    return meta_html + content_style + safe_html + "</div>"


def render_plain_text(result_dict: dict) -> str:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç.
    
    Args:
        result_dict: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ answer, cost, usage, model
        
    Returns:
        –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    """
    answer = result_dict.get('answer', '')
    cost = result_dict.get('cost', {})
    usage = result_dict.get('usage', {})
    model = result_dict.get('model', 'unknown')
    usd_to_rub = cost.get('usd_to_rub_rate', 95.0)
    
    header = f"""
================================================================================
AI –ê–ù–ê–õ–ò–ó
================================================================================
–ú–æ–¥–µ–ª—å: {model}
–°—Ç–æ–∏–º–æ—Å—Ç—å USD: ${cost.get('total', 0):.6f} (–≤—Ö–æ–¥: ${cost.get('input', 0):.6f}, –≤—ã—Ö–æ–¥: ${cost.get('output', 0):.6f})
üí∞ –ò–¢–û–ì–û –í –†–£–ë–õ–Ø–•: ‚ÇΩ{cost.get('total_rub', 0):.2f}
   –ø–æ –∫—É—Ä—Å—É ${usd_to_rub:.2f} (–≤—Ö–æ–¥: ‚ÇΩ{cost.get('input_rub', 0):.2f}, –≤—ã—Ö–æ–¥: ‚ÇΩ{cost.get('output_rub', 0):.2f})
–¢–æ–∫–µ–Ω—ã: {usage.get('total_tokens', 0):,} (–≤—Ö–æ–¥: {usage.get('input_tokens', 0):,}, –≤—ã—Ö–æ–¥: {usage.get('output_tokens', 0):,})
================================================================================

"""
    
    return header + answer
