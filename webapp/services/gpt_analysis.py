"""–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI GPT API."""
import os
import json
import requests
from typing import Dict, Any, Optional, Tuple, List
from datetime import datetime
from flask import current_app


class GPTAnalysisService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI GPT API."""
    
    def __init__(self, api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            api_key: API –∫–ª—é—á OpenAI (–µ—Å–ª–∏ None, –±–µ—Ä—ë—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        """
        self.api_key = api_key or self._get_api_key()
        self.api_url = "https://api.openai.com/v1/chat/completions"
        self.model = "gpt-3.5-turbo"
        self.max_tokens = 150
        self.temperature = 0.7
    
    def _get_api_key(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        api_key = os.environ.get('OPENAI_API_KEY', '')
        if api_key:
            return api_key
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –ø—Ä–æ–±—É–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ Flask
        try:
            return current_app.config.get('OPENAI_API_KEY', '')
        except Exception:
            return ''
    
    def analyze_text(
        self,
        text: str,
        prompt: str,
        max_request_size: int = 4096
    ) -> Tuple[bool, str, Optional[str]]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ GPT.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è GPT
            max_request_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
            
        Returns:
            tuple: (success, message, gpt_response)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
            if not self.api_key:
                return False, 'API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            full_request = f"{prompt}\n\n{text}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
            if len(full_request) > max_request_size:
                excess = len(full_request) - max_request_size
                return False, f'–†–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ {excess} —Å–∏–º–≤–æ–ª–æ–≤', None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            headers = {
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {self.api_key}'
            }
            
            payload = {
                "model": self.model,
                "messages": [
                    {
                        "role": "user",
                        "content": full_request
                    }
                ],
                "max_tokens": self.max_tokens,
                "temperature": self.temperature
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞
            try:
                current_app.logger.info(f'–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT API (—Ä–∞–∑–º–µ—Ä: {len(full_request)} —Å–∏–º–≤–æ–ª–æ–≤)')
            except Exception:
                pass
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                self.api_url,
                json=payload,
                headers=headers,
                timeout=30
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            try:
                current_app.logger.info(f'–û—Ç–≤–µ—Ç –æ—Ç GPT API: {response.status_code}')
            except Exception:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            result = response.json()
            choices = result.get("choices", [])
            
            if not choices:
                return False, 'GPT –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç', None
            
            gpt_response = choices[0]["message"]["content"]
            
            return True, '–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', gpt_response
            
        except requests.exceptions.Timeout:
            error_msg = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT API'
            try:
                current_app.logger.error(error_msg)
            except Exception:
                pass
            return False, error_msg, None
            
        except requests.exceptions.HTTPError as e:
            status_code = e.response.status_code if hasattr(e, 'response') and e.response else 0
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if status_code == 429:
                error_msg = (
                    '‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI API.\n\n'
                    '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n'
                    '‚Ä¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É (RPM)\n'
                    '‚Ä¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ –º–∏–Ω—É—Ç—É (TPM)\n'
                    '‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ\n\n'
                    '–†–µ—à–µ–Ω–∏—è:\n'
                    '1. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n'
                    '2. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ platform.openai.com\n'
                    '3. –ü–æ–≤—ã—Å—å—Ç–µ –ª–∏–º–∏—Ç—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞'
                )
            elif status_code == 401:
                error_msg = (
                    'üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ OpenAI API.\n\n'
                    'API-–∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫.\n\n'
                    '–†–µ—à–µ–Ω–∏—è:\n'
                    '1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env\n'
                    '2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –Ω–∞ platform.openai.com\n'
                    '3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω'
                )
            elif status_code == 403:
                error_msg = (
                    'üö´ –î–æ—Å—Ç—É–ø –∫ OpenAI API –∑–∞–ø—Ä–µ—â—ë–Ω.\n\n'
                    '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n'
                    '‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n'
                    '‚Ä¢ –ù–∞—Ä—É—à–µ–Ω—ã —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n'
                    '‚Ä¢ –†–µ–≥–∏–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n\n'
                    '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É OpenAI'
                )
            elif status_code == 500 or status_code >= 500:
                error_msg = (
                    '‚öôÔ∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ OpenAI.\n\n'
                    '–ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ OpenAI.\n'
                    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.'
                )
            else:
                error_msg = f'–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT API: {e}'
            
            try:
                current_app.logger.error(f'HTTP Error {status_code}: {error_msg}')
            except Exception:
                pass
            return False, error_msg, None
            
        except requests.exceptions.RequestException as e:
            error_msg = f'–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT API: {e}'
            try:
                current_app.logger.error(error_msg)
            except Exception:
                pass
            return False, error_msg, None
            
        except ValueError as e:
            error_msg = f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –æ—Ç–≤–µ—Ç–∞: {e}'
            try:
                current_app.logger.error(error_msg)
            except Exception:
                pass
            return False, error_msg, None
            
        except Exception as e:
            error_msg = f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}'
            try:
                current_app.logger.exception(error_msg)
            except Exception:
                pass
            return False, error_msg, None


class PromptManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏."""
    
    def __init__(self, prompts_folder: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        
        Args:
            prompts_folder: –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
        """
        self.prompts_folder = prompts_folder
        os.makedirs(self.prompts_folder, exist_ok=True)
        self.last_prompt_file = os.path.join(self.prompts_folder, '_last_prompt.txt')
    
    def save_prompt(self, prompt: str, filename: Optional[str] = None) -> Tuple[bool, str]:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≤ —Ñ–∞–π–ª.
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ None, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            
        Returns:
            tuple: (success, message)
        """
        try:
            if not filename:
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                filename = f'prompt_{timestamp}.txt'
            
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .txt
            if not filename.endswith('.txt'):
                filename += '.txt'
            
            filepath = os.path.join(self.prompts_folder, filename)
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(prompt)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            with open(self.last_prompt_file, 'w', encoding='utf-8') as f:
                f.write(prompt)
            
            return True, f'–ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}'
            
        except Exception as e:
            return False, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}'
    
    def load_prompt(self, filename: str) -> Tuple[bool, str, Optional[str]]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞.
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            tuple: (success, message, prompt_text)
        """
        try:
            filepath = os.path.join(self.prompts_folder, filename)
            
            if not os.path.exists(filepath):
                return False, f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}', None
            
            with open(filepath, 'r', encoding='utf-8') as f:
                prompt = f.read()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            with open(self.last_prompt_file, 'w', encoding='utf-8') as f:
                f.write(prompt)
            
            return True, '–ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω', prompt
            
        except Exception as e:
            return False, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}', None
    
    def get_last_prompt(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç.
        
        Returns:
            –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∏–ª–∏ –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        try:
            if os.path.exists(self.last_prompt_file):
                with open(self.last_prompt_file, 'r', encoding='utf-8') as f:
                    return f.read()
        except Exception:
            pass
        
        # –ü—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É:"
    
    def list_prompts(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤
        """
        try:
            files = []
            for filename in os.listdir(self.prompts_folder):
                if filename.endswith('.txt') and not filename.startswith('_'):
                    files.append(filename)
            return sorted(files, reverse=True)
        except Exception:
            return []
