"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º –ø–æ—Ä—Ç–∞.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    from restart_server import ServerReloader
    
    reloader = ServerReloader(port=8000, start_command="python app.py")
    reloader.restart()

–ò–ª–∏ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞:
    python restart_server.py --port 5000 --command "python3 app.py"
    python restart_server.py  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Ä—Ç 5000, –∫–æ–º–∞–Ω–¥–∞ "python3 app.py"
"""
import sys
import os
import time
import subprocess
import logging
from typing import Optional

try:
    import psutil
except ImportError:
    psutil = None  # type: ignore


class ServerReloader:
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º –ø–æ—Ä—Ç–∞."""
    
    def __init__(self, port: int, start_command: str, wait_time: float = 2.5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.
        
        Args:
            port: –ù–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
            start_command: –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "python app.py")
            wait_time: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏ –∑–∞–ø—É—Å–∫–æ–º (—Å–µ–∫—É–Ω–¥—ã)
        """
        self.port = port
        self.start_command = start_command
        self.wait_time = wait_time
        self.logger = self._setup_logger()
        
        if psutil is None:
            self.logger.warning(
                "‚ö†Ô∏è  psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —á–µ—Ä–µ–∑ lsof/netstat. "
                "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psutil"
            )
    
    def _setup_logger(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å."""
        logger = logging.getLogger('ServerReloader')
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            handler = logging.StreamHandler(sys.stdout)
            handler.setLevel(logging.INFO)
            formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')
            handler.setFormatter(formatter)
            logger.addHandler(handler)
        
        return logger
    
    def free_port(self) -> bool:
        """
        –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–æ—Ä—Ç, –∑–∞–≤–µ—Ä—à–∞—è –ø—Ä–æ—Ü–µ—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –∑–∞–Ω–∏–º–∞—é—Ç.
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ—Ä—Ç –±—ã–ª –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω –∏–ª–∏ —É–∂–µ —Å–≤–æ–±–æ–¥–µ–Ω, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ {self.port}...")
        
        if psutil:
            return self._free_port_psutil()
        else:
            return self._free_port_fallback()
    
    def _free_port_psutil(self) -> bool:
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ psutil (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)."""
        killed = []
        
        try:
            for conn in psutil.net_connections(kind='inet'):
                if conn.laddr.port == self.port and conn.pid:
                    try:
                        proc = psutil.Process(conn.pid)
                        proc_name = proc.name()
                        self.logger.info(
                            f"üî™ –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å {proc_name} (PID: {conn.pid}) –Ω–∞ –ø–æ—Ä—Ç—É {self.port}"
                        )
                        proc.terminate()
                        killed.append(conn.pid)
                    except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
                        self.logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {conn.pid}: {e}")
            
            # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if killed:
                time.sleep(0.5)
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –µ—â—ë –∂–∏–≤
                for pid in killed:
                    try:
                        proc = psutil.Process(pid)
                        if proc.is_running():
                            self.logger.warning(f"‚ö†Ô∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}")
                            proc.kill()
                    except psutil.NoSuchProcess:
                        pass  # –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω
                
                self.logger.info(f"‚úÖ –ü–æ—Ä—Ç {self.port} –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω (–∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(killed)})")
            else:
                self.logger.info(f"‚úÖ –ü–æ—Ä—Ç {self.port} —Å–≤–æ–±–æ–¥–µ–Ω")
            
            return True
        
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –ø–æ—Ä—Ç–∞: {e}")
            return False
    
    def _free_port_fallback(self) -> bool:
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (fallback –¥–ª—è macOS/Linux)."""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
            if sys.platform == 'darwin':  # macOS
                cmd = f"lsof -ti:{self.port} | xargs kill -9 2>/dev/null || true"
            elif sys.platform.startswith('linux'):
                cmd = f"fuser -k {self.port}/tcp 2>/dev/null || true"
            else:
                self.logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: {sys.platform}")
                return False
            
            result = subprocess.run(
                cmd,
                shell=True,
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                self.logger.info(f"‚úÖ –ü–æ—Ä—Ç {self.port} –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω")
                return True
            else:
                self.logger.warning(f"‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥ {result.returncode}")
                return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –ø–æ—Ä—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —Å–≤–æ–±–æ–¥–µ–Ω
        
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –ø–æ—Ä—Ç–∞: {e}")
            return False
    
    def start_server(self) -> Optional[subprocess.Popen]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π.
        
        Returns:
            subprocess.Popen –æ–±—ä–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞: {self.start_command}")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è subprocess
            cmd_parts = self.start_command.split()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            process = subprocess.Popen(
                cmd_parts,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                cwd=os.getcwd()
            )
            
            # –î–∞—ë–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞—Ä—Ç
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            if process.poll() is None:
                self.logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
                return process
            else:
                stdout, stderr = process.communicate()
                self.logger.error(f"‚ùå –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞")
                if stderr:
                    self.logger.error(f"–û—à–∏–±–∫–∞: {stderr}")
                return None
        
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return None
    
    def restart(self) -> bool:
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞, –æ–∂–∏–¥–∞–Ω–∏–µ, –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞.
        
        Returns:
            True –µ—Å–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        self.logger.info("="*60)
        self.logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞...")
        self.logger.info("="*60)
        
        # 1. –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç
        if not self.free_port():
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç")
            return False
        
        # 2. –ñ–¥—ë–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        self.logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {self.wait_time} —Å–µ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º...")
        time.sleep(self.wait_time)
        
        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        process = self.start_server()
        
        if process:
            self.logger.info("="*60)
            self.logger.info("‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            self.logger.info(f"üìç –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
            self.logger.info("="*60)
            return True
        else:
            self.logger.error("="*60)
            self.logger.error("‚ùå –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
            self.logger.error("="*60)
            return False


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç."""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º –ø–æ—Ä—Ç–∞'
    )
    parser.add_argument(
        '--port', '-p',
        type=int,
        default=8081,
        help='–ù–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8081)'
    )
    parser.add_argument(
        '--command', '-c',
        type=str,
        default='python3 app.py',
        help='–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "python3 app.py")'
    )
    parser.add_argument(
        '--wait', '-w',
        type=float,
        default=2.5,
        help='–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏ –∑–∞–ø—É—Å–∫–æ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2.5)'
    )
    
    args = parser.parse_args()
    
    reloader = ServerReloader(
        port=args.port,
        start_command=args.command,
        wait_time=args.wait
    )
    
    success = reloader.restart()
    sys.exit(0 if success else 1)


if __name__ == '__main__':
    main()
