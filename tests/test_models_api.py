"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ OpenAI –º–æ–¥–µ–ª–µ–π.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (401, 404, –ø—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏)
- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (temperature, max_tokens/max_completion_tokens)
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ system role
- –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π timeout
- –†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–∫–µ–Ω–æ–≤

–ó–∞–ø—É—Å–∫: pytest tests/test_models_api.py -v -s
"""
import os
import json
import time
import pytest
from pathlib import Path
from typing import Dict, List, Any, Tuple
import openai


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BASE_DIR = Path(__file__).parent.parent
MODELS_CONFIG_PATH = BASE_DIR / 'index' / 'models.json'
TEST_PROMPT = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏ —Å–∫–∞–∂–∏ –≥–ª–∞–≤–Ω–æ–µ: –ü–æ—Å—Ç–∞–≤–∫–∞ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–∞–µ—Ç 2 –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞ –º–æ—â–Ω–æ—Å—Ç—å—é 5 –∫–í—Ç."
TEST_SYSTEM_PROMPT = "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–∫—É–ø–æ–∫. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫—Ä–∞—Ç–∫–æ."


# === –£—Ç–∏–ª–∏—Ç—ã ===
def load_models_config() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π."""
    with open(MODELS_CONFIG_PATH, 'r', encoding='utf-8') as f:
        return json.load(f)


def save_models_config(config: Dict[str, Any]) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π."""
    backup_path = MODELS_CONFIG_PATH.with_suffix('.json.backup')
    if MODELS_CONFIG_PATH.exists():
        import shutil
        shutil.copy(MODELS_CONFIG_PATH, backup_path)
    
    with open(MODELS_CONFIG_PATH, 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=2)


def get_api_key() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    api_key = os.environ.get('OPENAI_API_KEY')
    if not api_key:
        pytest.skip("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    return api_key


def is_new_model_family(model_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –∫ –Ω–æ–≤—ã–º —Å–µ–º–µ–π—Å—Ç–≤–∞–º (o1, o3, o4, gpt-4.1, gpt-5)."""
    return model_id.startswith(('o1', 'o3', 'o4', 'gpt-4.1', 'gpt-5'))


def test_model_basic(
    model_id: str,
    api_key: str,
    supports_system: bool = True,
    timeout: int = 30,
    max_tokens: int = 150
) -> Tuple[bool, str, Dict[str, Any]]:
    """
    –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏.
    
    Returns:
        (success, error_message, result_data)
    """
    client = openai.OpenAI(api_key=api_key, timeout=timeout)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if supports_system:
        messages = [
            {"role": "system", "content": TEST_SYSTEM_PROMPT},
            {"role": "user", "content": TEST_PROMPT}
        ]
    else:
        messages = [
            {"role": "user", "content": f"{TEST_SYSTEM_PROMPT}\n\n{TEST_PROMPT}"}
        ]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ–º–µ–π—Å—Ç–≤
    is_new = is_new_model_family(model_id)
    
    kwargs = {
        'model': model_id,
        'messages': messages
    }
    
    # –ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç max_completion_tokens
    if is_new:
        kwargs['max_completion_tokens'] = max_tokens
    else:
        kwargs['max_tokens'] = max_tokens
    
    # –ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç temperature (–∏–ª–∏ —Ç–æ–ª—å–∫–æ 1)
    if not is_new:
        kwargs['temperature'] = 0.3
    
    try:
        start = time.time()
        response = client.chat.completions.create(**kwargs)
        elapsed = time.time() - start
        
        return (True, "", {
            'content': response.choices[0].message.content,
            'usage': {
                'prompt_tokens': response.usage.prompt_tokens,
                'completion_tokens': response.usage.completion_tokens,
                'total_tokens': response.usage.total_tokens
            },
            'finish_reason': response.choices[0].finish_reason,
            'elapsed_time': round(elapsed, 2)
        })
    except Exception as e:
        error_str = str(e)
        return (False, error_str, {})


# === –§–∏–∫—Å—Ç—É—Ä—ã ===
@pytest.fixture(scope='module')
def api_key():
    """API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return get_api_key()


@pytest.fixture(scope='module')
def models_config():
    """–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π."""
    return load_models_config()


@pytest.fixture(scope='module')
def test_results():
    """–°–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤."""
    return {}


# === –¢–µ—Å—Ç—ã ===
class TestModelAvailability:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏."""
    
    def test_all_models_accessible(self, api_key, models_config, test_results):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        models = models_config.get('models', [])
        
        for model in models:
            model_id = model['model_id']
            print(f"\n{'='*60}")
            print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_id} ({model.get('display_name', '')})")
            print(f"{'='*60}")
            
            supports_system = model.get('supports_system_role', True)
            timeout = model.get('timeout', 30)
            
            success, error, result = test_model_basic(
                model_id=model_id,
                api_key=api_key,
                supports_system=supports_system,
                timeout=timeout,
                max_tokens=150
            )
            
            test_results[model_id] = {
                'success': success,
                'error': error,
                'result': result,
                'config': model
            }
            
            if success:
                print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_id} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result['elapsed_time']}s")
                print(f"   –¢–æ–∫–µ–Ω—ã: {result['usage']['total_tokens']} (–≤—Ö–æ–¥: {result['usage']['prompt_tokens']}, –≤—ã—Ö–æ–¥: {result['usage']['completion_tokens']})")
                print(f"   Finish reason: {result['finish_reason']}")
                print(f"   –û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {result['content'][:100]}...")
            else:
                print(f"‚ùå –ú–æ–¥–µ–ª—å {model_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                print(f"   –û—à–∏–±–∫–∞: {error}")
                
                # –ü—Ä–æ–±—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                if '401' in error or 'insufficient permissions' in error.lower():
                    print(f"   üí° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É/–¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª–∏.")
                elif 'temperature' in error.lower():
                    print(f"   üí° –û—à–∏–±–∫–∞ —Å temperature. –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ...")
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
                    success2, error2, result2 = test_model_basic(
                        model_id=model_id,
                        api_key=api_key,
                        supports_system=False,  # –¢–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π
                        timeout=timeout,
                        max_tokens=150
                    )
                    if success2:
                        print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ! –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ system role.")
                        test_results[model_id]['success'] = True
                        test_results[model_id]['error'] = ""
                        test_results[model_id]['result'] = result2
                        test_results[model_id]['config']['supports_system_role'] = False
                    else:
                        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å: {error2}")
                elif 'max_tokens' in error.lower():
                    print(f"   üí° –û—à–∏–±–∫–∞ —Å max_tokens. –≠—Ç–∞ –º–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç max_completion_tokens.")
                elif 'model' in error.lower() and '404' in error:
                    print(f"   üí° –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏–ª–∏ –º–æ–¥–µ–ª—å —É—Å—Ç–∞—Ä–µ–ª–∞.")


class TestModelOptimalParams:
    """–ü–æ–¥–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏."""
    
    def test_optimal_timeout(self, api_key, models_config, test_results):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π timeout –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
        print(f"\n{'='*60}")
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö timeout")
        print(f"{'='*60}")
        
        for model_id, data in test_results.items():
            if not data['success']:
                continue
            
            elapsed = data['result'].get('elapsed_time', 0)
            current_timeout = data['config'].get('timeout', 30)
            
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π timeout: 2-3x –æ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ + –∑–∞–ø–∞—Å
            recommended_timeout = max(20, int(elapsed * 3) + 10)
            
            print(f"\n{model_id}:")
            print(f"   –¢–µ–∫—É—â–∏–π timeout: {current_timeout}s")
            print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è: {elapsed}s")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π timeout: {recommended_timeout}s")
            
            if recommended_timeout != current_timeout:
                test_results[model_id]['optimal_timeout'] = recommended_timeout
            else:
                test_results[model_id]['optimal_timeout'] = current_timeout


class TestModelCleanup:
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ—Ä–∞–±–æ—á–∏—Ö –º–æ–¥–µ–ª–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    
    def test_remove_broken_models(self, models_config, test_results):
        """–£–¥–∞–ª–∏—Ç—å –Ω–µ—Ä–∞–±–æ—á–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        print(f"\n{'='*60}")
        print("–û—á–∏—Å—Ç–∫–∞ –Ω–µ—Ä–∞–±–æ—á–∏—Ö –º–æ–¥–µ–ª–µ–π")
        print(f"{'='*60}")
        
        original_models = models_config.get('models', [])
        working_models = []
        removed_models = []
        
        for model in original_models:
            model_id = model['model_id']
            result = test_results.get(model_id, {})
            
            if result.get('success', False):
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if 'optimal_timeout' in result:
                    model['timeout'] = result['optimal_timeout']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º supports_system_role –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if 'config' in result and 'supports_system_role' in result['config']:
                    model['supports_system_role'] = result['config']['supports_system_role']
                
                working_models.append(model)
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_id}")
            else:
                removed_models.append(model_id)
                print(f"‚ùå –£–¥–∞–ª–µ–Ω–∞: {model_id} (–ø—Ä–∏—á–∏–Ω–∞: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')[:100]})")
        
        if removed_models:
            models_config['models'] = working_models
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º default_model
            default_model = models_config.get('default_model')
            if default_model in removed_models:
                if working_models:
                    models_config['default_model'] = working_models[0]['model_id']
                    print(f"‚ö†Ô∏è  default_model –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {models_config['default_model']}")
                else:
                    models_config['default_model'] = None
                    print(f"‚ö†Ô∏è  –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –º–æ–¥–µ–ª–µ–π! default_model = None")
            
            save_models_config(models_config)
            print(f"\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(removed_models)}")
        else:
            print(f"\n‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


# === –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç ===
@pytest.fixture(scope='module', autouse=True)
def final_report(request, test_results):
    """–í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    def print_report():
        print(f"\n{'='*60}")
        print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
        print(f"{'='*60}")
        
        working = [m for m, d in test_results.items() if d.get('success')]
        broken = [m for m, d in test_results.items() if not d.get('success')]
        
        print(f"\n‚úÖ –†–∞–±–æ—á–∏–µ –º–æ–¥–µ–ª–∏ ({len(working)}):")
        for model_id in working:
            data = test_results[model_id]
            print(f"   ‚Ä¢ {model_id}")
            print(f"     - –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {data['result']['elapsed_time']}s")
            print(f"     - Timeout: {data.get('optimal_timeout', data['config'].get('timeout'))}s")
            print(f"     - System role: {'–¥–∞' if data['config'].get('supports_system_role', True) else '–Ω–µ—Ç'}")
        
        if broken:
            print(f"\n‚ùå –ù–µ—Ä–∞–±–æ—á–∏–µ –º–æ–¥–µ–ª–∏ ({len(broken)}):")
            for model_id in broken:
                data = test_results[model_id]
                error = data.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
                print(f"   ‚Ä¢ {model_id}: {error[:80]}")
        
        print(f"\n{'='*60}")
    
    request.addfinalizer(print_report)
