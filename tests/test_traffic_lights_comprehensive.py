"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ª–æ–≥–∏–∫–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫.
"""
import pytest
from webapp.utils.traffic_lights import TrafficLightLogic


class TestFileTrafficLights:
    """–¢–µ—Å—Ç—ã —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤."""
    
    def test_unindexed_file_always_red(self):
        """
        üî¥ –ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤—Å–µ–≥–¥–∞ –∫—Ä–∞—Å–Ω—ã–π, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.
        """
        # –°—Ç–∞—Ç—É—Å error - –≤—Å–µ–≥–¥–∞ –∫—Ä–∞—Å–Ω—ã–π
        assert TrafficLightLogic.get_file_traffic_light_color('error', 100, False, False) == 'red'
        assert TrafficLightLogic.get_file_traffic_light_color('error', 100, False, True) == 'red'
        assert TrafficLightLogic.get_file_traffic_light_color('error', 100, True, True) == 'red'
        
        # –°—Ç–∞—Ç—É—Å unsupported - –≤—Å–µ–≥–¥–∞ –∫—Ä–∞—Å–Ω—ã–π
        assert TrafficLightLogic.get_file_traffic_light_color('unsupported', 50, False, False) == 'red'
        assert TrafficLightLogic.get_file_traffic_light_color('unsupported', 50, False, True) == 'red'
        assert TrafficLightLogic.get_file_traffic_light_color('unsupported', 50, True, True) == 'red'
        
        # –ù—É–ª–µ–≤–æ–π char_count - –≤—Å–µ–≥–¥–∞ –∫—Ä–∞—Å–Ω—ã–π
        assert TrafficLightLogic.get_file_traffic_light_color('processing', 0, False, False) == 'red'
        assert TrafficLightLogic.get_file_traffic_light_color('processing', 0, False, True) == 'red'
        assert TrafficLightLogic.get_file_traffic_light_color('processing', 0, True, True) == 'red'
        assert TrafficLightLogic.get_file_traffic_light_color('contains_keywords', 0, True, True) == 'red'
    
    def test_indexed_file_before_search_is_gray(self):
        """
        ‚ö™ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ - —Å–µ—Ä—ã–π.
        """
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        assert TrafficLightLogic.get_file_traffic_light_color('contains_keywords', 100, False, False) == 'gray'
        assert TrafficLightLogic.get_file_traffic_light_color('no_keywords', 50, False, False) == 'gray'
        assert TrafficLightLogic.get_file_traffic_light_color('processing', 200, False, False) == 'gray'
        assert TrafficLightLogic.get_file_traffic_light_color('not_checked', None, False, False) == 'gray'
    
    def test_indexed_file_with_search_results_is_green(self):
        """
        üü¢ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ - –∑–µ–ª—ë–Ω—ã–π.
        """
        assert TrafficLightLogic.get_file_traffic_light_color('contains_keywords', 100, True, True) == 'green'
        assert TrafficLightLogic.get_file_traffic_light_color('no_keywords', 50, True, True) == 'green'
        assert TrafficLightLogic.get_file_traffic_light_color('processing', 200, True, True) == 'green'
    
    def test_indexed_file_without_search_results_is_yellow(self):
        """
        üü° –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–∏—Å–∫–µ - –∂—ë–ª—Ç—ã–π.
        """
        assert TrafficLightLogic.get_file_traffic_light_color('contains_keywords', 100, False, True) == 'yellow'
        assert TrafficLightLogic.get_file_traffic_light_color('no_keywords', 50, False, True) == 'yellow'
        assert TrafficLightLogic.get_file_traffic_light_color('processing', 200, False, True) == 'yellow'
    
    def test_file_indexing_check(self):
        """
        –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞.
        """
        # –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        assert TrafficLightLogic.is_file_indexed('contains_keywords', 100) == True
        assert TrafficLightLogic.is_file_indexed('no_keywords', 50) == True
        assert TrafficLightLogic.is_file_indexed('processing', 200) == True
        
        # –ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        assert TrafficLightLogic.is_file_indexed('error', 100) == False
        assert TrafficLightLogic.is_file_indexed('unsupported', 50) == False
        assert TrafficLightLogic.is_file_indexed('processing', 0) == False


class TestFolderTrafficLights:
    """–¢–µ—Å—Ç—ã —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ –¥–ª—è –ø–∞–ø–æ–∫."""
    
    def test_folder_with_only_red_files_is_red(self):
        """
        üî¥ –ü–∞–ø–∫–∞ —Å –¢–û–õ–¨–ö–û –Ω–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ - –∫—Ä–∞—Å–Ω–∞—è.
        –ö—Ä–∞—Å–Ω—ã–π —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –í–°–ï —Ñ–∞–π–ª—ã –∫—Ä–∞—Å–Ω—ã–µ.
        """
        # –¢–æ–ª—å–∫–æ –∫—Ä–∞—Å–Ω—ã–µ —Ñ–∞–π–ª—ã = –∫—Ä–∞—Å–Ω–∞—è –ø–∞–ø–∫–∞
        assert TrafficLightLogic.get_folder_traffic_light_color(['red']) == 'red'
        assert TrafficLightLogic.get_folder_traffic_light_color(['red', 'red', 'red']) == 'red'
    
    def test_folder_with_green_files_is_green(self):
        """
        üü¢ –ü–∞–ø–∫–∞ —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ - –∑–µ–ª—ë–Ω–∞—è.
        –ó–µ–ª—ë–Ω—ã–π –∏–º–µ–µ—Ç –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
        """
        # –ó–µ–ª—ë–Ω—ã–π —Ñ–∞–π–ª = –∑–µ–ª—ë–Ω–∞—è –ø–∞–ø–∫–∞ (–¥–∞–∂–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥—Ä—É–≥–∏—Ö —Ü–≤–µ—Ç–æ–≤)
        assert TrafficLightLogic.get_folder_traffic_light_color(['green', 'yellow', 'gray']) == 'green'
        assert TrafficLightLogic.get_folder_traffic_light_color(['green', 'yellow']) == 'green'
        assert TrafficLightLogic.get_folder_traffic_light_color(['green', 'gray']) == 'green'
        assert TrafficLightLogic.get_folder_traffic_light_color(['green']) == 'green'
        
        # –ù–µ—Å–∫–æ–ª—å–∫–æ –∑–µ–ª—ë–Ω—ã—Ö
        assert TrafficLightLogic.get_folder_traffic_light_color(['green', 'green', 'yellow']) == 'green'
        assert TrafficLightLogic.get_folder_traffic_light_color(['green', 'green', 'green']) == 'green'
        
        # –ó–µ–ª—ë–Ω—ã–π –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–∞–∂–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫—Ä–∞—Å–Ω—ã—Ö
        assert TrafficLightLogic.get_folder_traffic_light_color(['red', 'green']) == 'green'
        assert TrafficLightLogic.get_folder_traffic_light_color(['red', 'green', 'yellow', 'gray']) == 'green'
        assert TrafficLightLogic.get_folder_traffic_light_color(['red', 'red', 'green']) == 'green'
    
    def test_folder_with_yellow_files_is_yellow(self):
        """
        üü° –ü–∞–ø–∫–∞ —Å –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –∂—ë–ª—Ç–∞—è.
        (–ü—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–µ–ª—ë–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
        """
        # –ñ—ë–ª—Ç—ã–π –±–µ–∑ –∑–µ–ª—ë–Ω—ã—Ö = –∂—ë–ª—Ç—ã–π
        assert TrafficLightLogic.get_folder_traffic_light_color(['yellow', 'gray']) == 'yellow'
        assert TrafficLightLogic.get_folder_traffic_light_color(['yellow']) == 'yellow'
        
        # –ù–µ—Å–∫–æ–ª—å–∫–æ –∂—ë–ª—Ç—ã—Ö
        assert TrafficLightLogic.get_folder_traffic_light_color(['yellow', 'yellow', 'gray']) == 'yellow'
        assert TrafficLightLogic.get_folder_traffic_light_color(['yellow', 'yellow', 'yellow']) == 'yellow'
        
        # –ñ—ë–ª—Ç—ã–π –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –∫—Ä–∞—Å–Ω—ã–º
        assert TrafficLightLogic.get_folder_traffic_light_color(['red', 'yellow']) == 'yellow'
        assert TrafficLightLogic.get_folder_traffic_light_color(['red', 'yellow', 'gray']) == 'yellow'
    
    def test_folder_with_only_gray_files_is_gray(self):
        """
        ‚ö™ –ü–∞–ø–∫–∞ —Ç–æ–ª—å–∫–æ —Å —Å–µ—Ä—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ (–¥–æ –ø–æ–∏—Å–∫–∞) - —Å–µ—Ä–∞—è.
        –¢–∞–∫–∂–µ —Å–º–µ—Å—å —Å–µ—Ä—ã—Ö –∏ –∫—Ä–∞—Å–Ω—ã—Ö –±–µ–∑ –∂—ë–ª—Ç—ã—Ö/–∑–µ–ª—ë–Ω—ã—Ö - —Å–µ—Ä–∞—è.
        """
        assert TrafficLightLogic.get_folder_traffic_light_color(['gray']) == 'gray'
        assert TrafficLightLogic.get_folder_traffic_light_color(['gray', 'gray']) == 'gray'
        assert TrafficLightLogic.get_folder_traffic_light_color(['gray', 'gray', 'gray']) == 'gray'
        
        # –°–º–µ—Å—å —Å–µ—Ä—ã—Ö –∏ –∫—Ä–∞—Å–Ω—ã—Ö –±–µ–∑ –∂—ë–ª—Ç—ã—Ö/–∑–µ–ª—ë–Ω—ã—Ö = —Å–µ—Ä–∞—è
        assert TrafficLightLogic.get_folder_traffic_light_color(['red', 'gray']) == 'gray'
    
    def test_empty_folder_is_gray(self):
        """
        –ü—É—Å—Ç–∞—è –ø–∞–ø–∫–∞ - —Å–µ—Ä–∞—è.
        """
        assert TrafficLightLogic.get_folder_traffic_light_color([]) == 'gray'
        assert TrafficLightLogic.get_folder_traffic_light_color(None) == 'gray'
    
    def test_folder_priority_order(self):
        """
        –¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø–∞–ø–æ–∫: –∑–µ–ª—ë–Ω—ã–π > –∂—ë–ª—Ç—ã–π > –∫—Ä–∞—Å–Ω—ã–π (—Ç–æ–ª—å–∫–æ –≤—Å–µ) > —Å–µ—Ä—ã–π.
        """
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ó–µ–ª—ë–Ω—ã–π > –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        assert TrafficLightLogic.get_folder_traffic_light_color(['red', 'green', 'yellow', 'gray']) == 'green'
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ñ—ë–ª—Ç—ã–π > –∫—Ä–∞—Å–Ω—ã–π –∏ —Å–µ—Ä—ã–π (–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–µ–ª—ë–Ω–æ–≥–æ)
        assert TrafficLightLogic.get_folder_traffic_light_color(['red', 'yellow', 'gray']) == 'yellow'
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ö—Ä–∞—Å–Ω—ã–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –í–°–ï —Ñ–∞–π–ª—ã –∫—Ä–∞—Å–Ω—ã–µ)
        assert TrafficLightLogic.get_folder_traffic_light_color(['red', 'red', 'red']) == 'red'
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –°–µ—Ä—ã–π (–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∂—ë–ª—Ç—ã—Ö/–∑–µ–ª—ë–Ω—ã—Ö –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å–µ—Ä—ã–µ)
        assert TrafficLightLogic.get_folder_traffic_light_color(['gray', 'gray']) == 'gray'


class TestSortingPriority:
    """–¢–µ—Å—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
    
    def test_sort_priority_values(self):
        """
        –¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:
        - –ó–µ–ª—ë–Ω—ã–π: 3 (–Ω–∞–≤–µ—Ä—Ö)
        - –°–µ—Ä—ã–π/–ñ—ë–ª—Ç—ã–π: 2 (–≤ —Å–µ—Ä–µ–¥–∏–Ω—É)
        - –ö—Ä–∞—Å–Ω—ã–π: 1 (–≤–Ω–∏–∑)
        """
        assert TrafficLightLogic.get_sort_priority('green') == 3
        assert TrafficLightLogic.get_sort_priority('gray') == 2
        assert TrafficLightLogic.get_sort_priority('yellow') == 2
        assert TrafficLightLogic.get_sort_priority('red') == 1
    
    def test_sort_priority_order(self):
        """
        –¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É.
        """
        colors = ['red', 'yellow', 'green', 'gray']
        sorted_colors = sorted(colors, key=TrafficLightLogic.get_sort_priority, reverse=True)
        
        # –ó–µ–ª—ë–Ω—ã–µ –Ω–∞–≤–µ—Ä—Ö, –∫—Ä–∞—Å–Ω—ã–µ –≤–Ω–∏–∑
        assert sorted_colors[0] == 'green'
        assert sorted_colors[-1] == 'red'
        # –°–µ—Ä—ã–π –∏ –∂—ë–ª—Ç—ã–π –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        assert set(sorted_colors[1:3]) == {'yellow', 'gray'}


class TestSearchScenarios:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞."""
    
    def test_before_first_search_all_indexed_are_gray(self):
        """
        –î–æ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—Å–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã - —Å–µ—Ä—ã–µ.
        """
        # –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–æ –ø–æ–∏—Å–∫–∞
        assert TrafficLightLogic.get_file_traffic_light_color('contains_keywords', 100, False, False) == 'gray'
        assert TrafficLightLogic.get_file_traffic_light_color('no_keywords', 50, False, False) == 'gray'
        
        # –ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤—Å–µ–≥–¥–∞ –∫—Ä–∞—Å–Ω—ã–µ
        assert TrafficLightLogic.get_file_traffic_light_color('error', 100, False, False) == 'red'
        assert TrafficLightLogic.get_file_traffic_light_color('unsupported', 50, False, False) == 'red'
    
    def test_after_search_indexed_are_green_or_yellow(self):
        """
        –ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã - –∑–µ–ª—ë–Ω—ã–µ (–µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è) –∏–ª–∏ –∂—ë–ª—Ç—ã–µ (–Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π).
        """
        # –° —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ = –∑–µ–ª—ë–Ω—ã–π
        assert TrafficLightLogic.get_file_traffic_light_color('contains_keywords', 100, True, True) == 'green'
        
        # –ë–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π = –∂—ë–ª—Ç—ã–π
        assert TrafficLightLogic.get_file_traffic_light_color('no_keywords', 50, False, True) == 'yellow'
    
    def test_after_search_unindexed_still_red(self):
        """
        –ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—Å—Ç–∞—é—Ç—Å—è –∫—Ä–∞—Å–Ω—ã–º–∏.
        """
        # –ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤—Å–µ–≥–¥–∞ –∫—Ä–∞—Å–Ω—ã–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å "—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"
        assert TrafficLightLogic.get_file_traffic_light_color('error', 100, True, True) == 'red'
        assert TrafficLightLogic.get_file_traffic_light_color('unsupported', 50, True, True) == 'red'
        assert TrafficLightLogic.get_file_traffic_light_color('processing', 0, True, True) == 'red'
    
    def test_reverse_search_scenario(self):
        """
        –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (exclude mode):
        - –ó–µ–ª—ë–Ω—ã–π: —Ñ–∞–π–ª –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–æ–º—ã–µ —Å–ª–æ–≤–∞
        - –ñ—ë–ª—Ç—ã–π: —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–æ–º—ã–µ —Å–ª–æ–≤–∞ (–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—é)
        
        –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–∏—Å–∫–∞,
        —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç has_search_results.
        """
        # –ü—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ–∏—Å–∫–µ "—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ" = —Ñ–∞–π–ª –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞
        # –ó–µ–ª—ë–Ω—ã–π = –µ—Å—Ç—å "—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ" (—Ñ–∞–π–ª –ø—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä)
        assert TrafficLightLogic.get_file_traffic_light_color('no_keywords', 100, True, True) == 'green'
        
        # –ñ—ë–ª—Ç—ã–π = –Ω–µ—Ç "—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è" (—Ñ–∞–π–ª –Ω–µ –ø—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä)
        assert TrafficLightLogic.get_file_traffic_light_color('contains_keywords', 100, False, True) == 'yellow'


class TestArchiveScenarios:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∞—Ä—Ö–∏–≤–æ–≤."""
    
    def test_files_in_archive_follow_same_rules(self):
        """
        –§–∞–π–ª—ã –≤–Ω—É—Ç—Ä–∏ –∞—Ä—Ö–∏–≤–æ–≤ —Å–ª–µ–¥—É—é—Ç —Ç–µ–º –∂–µ –ø—Ä–∞–≤–∏–ª–∞–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤.
        """
        # –ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ - –∫—Ä–∞—Å–Ω—ã–π
        assert TrafficLightLogic.get_file_traffic_light_color('error', 100, False, False) == 'red'
        
        # –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ –¥–æ –ø–æ–∏—Å–∫–∞ - —Å–µ—Ä—ã–π
        assert TrafficLightLogic.get_file_traffic_light_color('contains_keywords', 100, False, False) == 'gray'
        
        # –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ - –∑–µ–ª—ë–Ω—ã–π
        assert TrafficLightLogic.get_file_traffic_light_color('contains_keywords', 100, True, True) == 'green'
        
        # –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –∂—ë–ª—Ç—ã–π
        assert TrafficLightLogic.get_file_traffic_light_color('no_keywords', 50, False, True) == 'yellow'
    
    def test_archive_folder_inherits_child_colors(self):
        """
        –ê—Ä—Ö–∏–≤ (–∫–∞–∫ –ø–∞–ø–∫–∞) –Ω–∞—Å–ª–µ–¥—É–µ—Ç —Ü–≤–µ—Ç–∞ —Ñ–∞–π–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø–æ —Ç–µ–º –∂–µ –ø—Ä–∞–≤–∏–ª–∞–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
        """
        # –ê—Ä—Ö–∏–≤ —Å –¢–û–õ–¨–ö–û –∫—Ä–∞—Å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ - –∫—Ä–∞—Å–Ω—ã–π
        assert TrafficLightLogic.get_folder_traffic_light_color(['red', 'red', 'red']) == 'red'
        
        # –ê—Ä—Ö–∏–≤ —Å –∑–µ–ª—ë–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ - –∑–µ–ª—ë–Ω—ã–π (–¥–∞–∂–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫—Ä–∞—Å–Ω—ã—Ö)
        assert TrafficLightLogic.get_folder_traffic_light_color(['red', 'green']) == 'green'
        assert TrafficLightLogic.get_folder_traffic_light_color(['green', 'yellow']) == 'green'
        
        # –ê—Ä—Ö–∏–≤ —Å –∂—ë–ª—Ç—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ (–±–µ–∑ –∑–µ–ª—ë–Ω—ã—Ö) - –∂—ë–ª—Ç—ã–π
        assert TrafficLightLogic.get_folder_traffic_light_color(['yellow', 'gray']) == 'yellow'
        assert TrafficLightLogic.get_folder_traffic_light_color(['red', 'yellow']) == 'yellow'
        
        # –ê—Ä—Ö–∏–≤ —Å —Å–µ—Ä—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ - —Å–µ—Ä—ã–π
        assert TrafficLightLogic.get_folder_traffic_light_color(['gray', 'gray']) == 'gray'


if __name__ == "__main__":
    pytest.main([__file__, '-v'])
