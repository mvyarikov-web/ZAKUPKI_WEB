/**
 * –¢–µ—Å—Ç—ã –¥–ª—è JavaScript –ª–æ–≥–∏–∫–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤.
 * –ó–∞–ø—É—Å–∫: node tests/test_traffic_lights.js
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
const {
    getFileTrafficLightColor,
    getFolderTrafficLightColor,
    isFileIndexed,
    getTrafficLightSortPriority,
    TRAFFIC_LIGHT_COLORS,
    FILE_STATUSES
} = require('../static/js/traffic-lights.js');

// –¶–≤–µ—Ç–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
const { RED, YELLOW, GREEN, GRAY } = TRAFFIC_LIGHT_COLORS;
const { ERROR, UNSUPPORTED, CONTAINS_KEYWORDS, NO_KEYWORDS, PROCESSING, NOT_CHECKED } = FILE_STATUSES;

// –ü—Ä–æ—Å—Ç–æ–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let testsPassed = 0;
let testsFailed = 0;

function assert(condition, message) {
    if (condition) {
        testsPassed++;
    } else {
        testsFailed++;
        console.error(`‚ùå FAILED: ${message}`);
    }
}

function assertEqual(actual, expected, message) {
    if (actual === expected) {
        testsPassed++;
    } else {
        testsFailed++;
        console.error(`‚ùå FAILED: ${message}`);
        console.error(`   Expected: ${expected}`);
        console.error(`   Actual:   ${actual}`);
    }
}

function describe(name, fn) {
    console.log(`\nüìã ${name}`);
    fn();
}

// –¢–µ—Å—Ç—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤
describe('–¢–µ—Å—Ç—ã —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤', () => {
    
    // –¢–µ—Å—Ç 1: –ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤—Å–µ–≥–¥–∞ –∫—Ä–∞—Å–Ω—ã–µ
    describe('  üî¥ –ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤—Å–µ–≥–¥–∞ –∫—Ä–∞—Å–Ω—ã–π', () => {
        assertEqual(getFileTrafficLightColor(ERROR, 100, false, false), RED, 
            'Error —Ñ–∞–π–ª –¥–æ –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–º');
        assertEqual(getFileTrafficLightColor(ERROR, 100, false, true), RED, 
            'Error —Ñ–∞–π–ª –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–º');
        assertEqual(getFileTrafficLightColor(ERROR, 100, true, true), RED, 
            'Error —Ñ–∞–π–ª –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–º');
        
        assertEqual(getFileTrafficLightColor(UNSUPPORTED, 50, false, false), RED, 
            'Unsupported —Ñ–∞–π–ª –¥–æ –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–º');
        assertEqual(getFileTrafficLightColor(UNSUPPORTED, 50, false, true), RED, 
            'Unsupported —Ñ–∞–π–ª –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–º');
        assertEqual(getFileTrafficLightColor(UNSUPPORTED, 50, true, true), RED, 
            'Unsupported —Ñ–∞–π–ª –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–º');
        
        assertEqual(getFileTrafficLightColor(PROCESSING, 0, false, false), RED, 
            '–§–∞–π–ª —Å –Ω—É–ª–µ–≤—ã–º char_count –¥–æ –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–º');
        assertEqual(getFileTrafficLightColor(PROCESSING, 0, false, true), RED, 
            '–§–∞–π–ª —Å –Ω—É–ª–µ–≤—ã–º char_count –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–º');
        assertEqual(getFileTrafficLightColor(PROCESSING, 0, true, true), RED, 
            '–§–∞–π–ª —Å –Ω—É–ª–µ–≤—ã–º char_count –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–º');
        assertEqual(getFileTrafficLightColor(CONTAINS_KEYWORDS, 0, true, true), RED, 
            'Contains_keywords —Å –Ω—É–ª–µ–≤—ã–º char_count –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–Ω—ã–º');
    });
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–æ –ø–æ–∏—Å–∫–∞ - —Å–µ—Ä—ã–µ
    describe('  ‚ö™ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–æ –ø–æ–∏—Å–∫–∞ - —Å–µ—Ä—ã–π', () => {
        assertEqual(getFileTrafficLightColor(CONTAINS_KEYWORDS, 100, false, false), GRAY, 
            'Contains_keywords –¥–æ –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–µ—Ä—ã–º');
        assertEqual(getFileTrafficLightColor(NO_KEYWORDS, 50, false, false), GRAY, 
            'No_keywords –¥–æ –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–µ—Ä—ã–º');
        assertEqual(getFileTrafficLightColor(PROCESSING, 200, false, false), GRAY, 
            'Processing –¥–æ –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–µ—Ä—ã–º');
        assertEqual(getFileTrafficLightColor(NOT_CHECKED, null, false, false), GRAY, 
            'Not_checked –¥–æ –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–µ—Ä—ã–º');
    });
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ - –∑–µ–ª—ë–Ω—ã–µ
    describe('  üü¢ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ - –∑–µ–ª—ë–Ω—ã–π', () => {
        assertEqual(getFileTrafficLightColor(CONTAINS_KEYWORDS, 100, true, true), GREEN, 
            'Contains_keywords —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–µ–ª—ë–Ω—ã–º');
        assertEqual(getFileTrafficLightColor(NO_KEYWORDS, 50, true, true), GREEN, 
            'No_keywords —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–µ–ª—ë–Ω—ã–º');
        assertEqual(getFileTrafficLightColor(PROCESSING, 200, true, true), GREEN, 
            'Processing —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–µ–ª—ë–Ω—ã–º');
    });
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –∂—ë–ª—Ç—ã–µ
    describe('  üü° –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –∂—ë–ª—Ç—ã–π', () => {
        assertEqual(getFileTrafficLightColor(CONTAINS_KEYWORDS, 100, false, true), YELLOW, 
            'Contains_keywords –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∂—ë–ª—Ç—ã–º');
        assertEqual(getFileTrafficLightColor(NO_KEYWORDS, 50, false, true), YELLOW, 
            'No_keywords –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∂—ë–ª—Ç—ã–º');
        assertEqual(getFileTrafficLightColor(PROCESSING, 200, false, true), YELLOW, 
            'Processing –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∂—ë–ª—Ç—ã–º');
    });
});

// –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
describe('–¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤', () => {
    // –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    assert(isFileIndexed(CONTAINS_KEYWORDS, 100) === true, 'Contains_keywords —Å char_count > 0 –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω');
    assert(isFileIndexed(NO_KEYWORDS, 50) === true, 'No_keywords —Å char_count > 0 –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω');
    assert(isFileIndexed(PROCESSING, 200) === true, 'Processing —Å char_count > 0 –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω');
    
    // –ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    assert(isFileIndexed(ERROR, 100) === false, 'Error –Ω–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω');
    assert(isFileIndexed(UNSUPPORTED, 50) === false, 'Unsupported –Ω–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω');
    assert(isFileIndexed(PROCESSING, 0) === false, 'Processing —Å char_count = 0 –Ω–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω');
});

// –¢–µ—Å—Ç—ã –¥–ª—è –ø–∞–ø–æ–∫
describe('–¢–µ—Å—Ç—ã —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ –¥–ª—è –ø–∞–ø–æ–∫', () => {
    
    // –¢–µ—Å—Ç 1: –ü–∞–ø–∫–∞ —Å –∑–µ–ª—ë–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ - –∑–µ–ª—ë–Ω–∞—è (–Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    describe('  üü¢ –ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ - –∑–µ–ª—ë–Ω–∞—è', () => {
        assertEqual(getFolderTrafficLightColor([GREEN, YELLOW, GRAY]), GREEN, 
            '–ü–∞–ø–∫–∞ [green, yellow, gray] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–µ–ª—ë–Ω–æ–π');
        assertEqual(getFolderTrafficLightColor([GREEN, YELLOW]), GREEN, 
            '–ü–∞–ø–∫–∞ [green, yellow] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–µ–ª—ë–Ω–æ–π');
        assertEqual(getFolderTrafficLightColor([GREEN, GRAY]), GREEN, 
            '–ü–∞–ø–∫–∞ [green, gray] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–µ–ª—ë–Ω–æ–π');
        assertEqual(getFolderTrafficLightColor([GREEN]), GREEN, 
            '–ü–∞–ø–∫–∞ [green] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–µ–ª—ë–Ω–æ–π');
        assertEqual(getFolderTrafficLightColor([GREEN, GREEN, YELLOW]), GREEN, 
            '–ü–∞–ø–∫–∞ [green, green, yellow] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–µ–ª—ë–Ω–æ–π');
        assertEqual(getFolderTrafficLightColor([GREEN, GREEN, GREEN]), GREEN, 
            '–ü–∞–ø–∫–∞ [green, green, green] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–µ–ª—ë–Ω–æ–π');
        // –ó–µ–ª—ë–Ω—ã–π –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–∞–∂–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫—Ä–∞—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        assertEqual(getFolderTrafficLightColor([RED, GREEN]), GREEN, 
            '–ü–∞–ø–∫–∞ [red, green] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–µ–ª—ë–Ω–æ–π (–∑–µ–ª—ë–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ)');
        assertEqual(getFolderTrafficLightColor([RED, GREEN, YELLOW, GRAY]), GREEN, 
            '–ü–∞–ø–∫–∞ [red, green, yellow, gray] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–µ–ª—ë–Ω–æ–π');
        assertEqual(getFolderTrafficLightColor([RED, RED, GREEN]), GREEN, 
            '–ü–∞–ø–∫–∞ [red, red, green] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–µ–ª—ë–Ω–æ–π');
    });
    
    // –¢–µ—Å—Ç 2: –ü–∞–ø–∫–∞ —Å –∂—ë–ª—Ç—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ - –∂—ë–ª—Ç–∞—è (–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–µ–ª—ë–Ω—ã—Ö)
    describe('  üü° –ü–∞–ø–∫–∞ —Å –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –∂—ë–ª—Ç–∞—è', () => {
        assertEqual(getFolderTrafficLightColor([YELLOW, GRAY]), YELLOW, 
            '–ü–∞–ø–∫–∞ [yellow, gray] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∂—ë–ª—Ç–æ–π');
        assertEqual(getFolderTrafficLightColor([YELLOW]), YELLOW, 
            '–ü–∞–ø–∫–∞ [yellow] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∂—ë–ª—Ç–æ–π');
        assertEqual(getFolderTrafficLightColor([YELLOW, YELLOW, GRAY]), YELLOW, 
            '–ü–∞–ø–∫–∞ [yellow, yellow, gray] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∂—ë–ª—Ç–æ–π');
        assertEqual(getFolderTrafficLightColor([YELLOW, YELLOW, YELLOW]), YELLOW, 
            '–ü–∞–ø–∫–∞ [yellow, yellow, yellow] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∂—ë–ª—Ç–æ–π');
        // –ñ—ë–ª—Ç—ã–π –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –∫—Ä–∞—Å–Ω—ã–º –∏ —Å–µ—Ä—ã–º
        assertEqual(getFolderTrafficLightColor([RED, YELLOW]), YELLOW, 
            '–ü–∞–ø–∫–∞ [red, yellow] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∂—ë–ª—Ç–æ–π (–∂—ë–ª—Ç—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ –∫—Ä–∞—Å–Ω–æ–≥–æ)');
        assertEqual(getFolderTrafficLightColor([RED, YELLOW, GRAY]), YELLOW, 
            '–ü–∞–ø–∫–∞ [red, yellow, gray] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∂—ë–ª—Ç–æ–π');
    });
    
    // –¢–µ—Å—Ç 3: –ü–∞–ø–∫–∞ —Å –¢–û–õ–¨–ö–û –∫—Ä–∞—Å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ - –∫—Ä–∞—Å–Ω–∞—è
    describe('  üî¥ –ü–∞–ø–∫–∞ —Å –¢–û–õ–¨–ö–û –Ω–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ - –∫—Ä–∞—Å–Ω–∞—è', () => {
        assertEqual(getFolderTrafficLightColor([RED]), RED, 
            '–ü–∞–ø–∫–∞ [red] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Å–Ω–æ–π');
        assertEqual(getFolderTrafficLightColor([RED, RED, RED]), RED, 
            '–ü–∞–ø–∫–∞ [red, red, red] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Å–Ω–æ–π (–≤—Å–µ —Ñ–∞–π–ª—ã –Ω–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã)');
    });
    
    // –¢–µ—Å—Ç 4: –ü–∞–ø–∫–∞ —Ç–æ–ª—å–∫–æ —Å —Å–µ—Ä—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ - —Å–µ—Ä–∞—è
    describe('  ‚ö™ –ü–∞–ø–∫–∞ —Ç–æ–ª—å–∫–æ —Å —Å–µ—Ä—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ - —Å–µ—Ä–∞—è', () => {
        assertEqual(getFolderTrafficLightColor([GRAY]), GRAY, 
            '–ü–∞–ø–∫–∞ [gray] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–µ—Ä–æ–π');
        assertEqual(getFolderTrafficLightColor([GRAY, GRAY]), GRAY, 
            '–ü–∞–ø–∫–∞ [gray, gray] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–µ—Ä–æ–π');
        assertEqual(getFolderTrafficLightColor([GRAY, GRAY, GRAY]), GRAY, 
            '–ü–∞–ø–∫–∞ [gray, gray, gray] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–µ—Ä–æ–π');
        // –°–º–µ—Å—å —Å–µ—Ä—ã—Ö –∏ –∫—Ä–∞—Å–Ω—ã—Ö –±–µ–∑ –∂—ë–ª—Ç—ã—Ö/–∑–µ–ª—ë–Ω—ã—Ö - —Å–µ—Ä–∞—è
        assertEqual(getFolderTrafficLightColor([RED, GRAY]), GRAY, 
            '–ü–∞–ø–∫–∞ [red, gray] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–µ—Ä–æ–π (—Å–º–µ—Å—å –±–µ–∑ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏)');
    });
    
    // –¢–µ—Å—Ç 5: –ü—É—Å—Ç–∞—è –ø–∞–ø–∫–∞ - —Å–µ—Ä–∞—è
    describe('  –ü—É—Å—Ç–∞—è –ø–∞–ø–∫–∞ - —Å–µ—Ä–∞—è', () => {
        assertEqual(getFolderTrafficLightColor([]), GRAY, 
            '–ü—É—Å—Ç–∞—è –ø–∞–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–µ—Ä–æ–π');
        assertEqual(getFolderTrafficLightColor(null), GRAY, 
            '–ü–∞–ø–∫–∞ —Å null –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–µ—Ä–æ–π');
    });
});

// –¢–µ—Å—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø–∞–ø–æ–∫
describe('–¢–µ—Å—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø–∞–ø–æ–∫', () => {
    assertEqual(getFolderTrafficLightColor([RED, GREEN, YELLOW, GRAY]), GREEN, 
        '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ó–µ–ª—ë–Ω—ã–π > –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ');
    assertEqual(getFolderTrafficLightColor([RED, YELLOW, GRAY]), YELLOW, 
        '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ñ—ë–ª—Ç—ã–π > –∫—Ä–∞—Å–Ω—ã–π –∏ —Å–µ—Ä—ã–π');
    assertEqual(getFolderTrafficLightColor([RED, RED, RED]), RED, 
        '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ö—Ä–∞—Å–Ω—ã–π (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –í–°–ï —Ñ–∞–π–ª—ã –∫—Ä–∞—Å–Ω—ã–µ)');
    assertEqual(getFolderTrafficLightColor([GRAY, GRAY]), GRAY, 
        '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –°–µ—Ä—ã–π (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö)');
});

// –¢–µ—Å—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
describe('–¢–µ—Å—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏', () => {
    assertEqual(getTrafficLightSortPriority(GREEN), 3, 
        '–ó–µ–ª—ë–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = 3');
    assertEqual(getTrafficLightSortPriority(GRAY), 2, 
        '–°–µ—Ä—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = 2');
    assertEqual(getTrafficLightSortPriority(YELLOW), 2, 
        '–ñ—ë–ª—Ç—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = 2');
    assertEqual(getTrafficLightSortPriority(RED), 1, 
        '–ö—Ä–∞—Å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = 1');
    
    // –¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const colors = [RED, YELLOW, GREEN, GRAY];
    const sorted = colors.sort((a, b) => getTrafficLightSortPriority(b) - getTrafficLightSortPriority(a));
    assertEqual(sorted[0], GREEN, '–ó–µ–ª—ë–Ω—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ');
    assertEqual(sorted[sorted.length - 1], RED, '–ö—Ä–∞—Å–Ω—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ');
});

// –¢–µ—Å—Ç—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
describe('–¢–µ—Å—Ç—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤', () => {
    
    describe('  –î–æ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞', () => {
        assertEqual(getFileTrafficLightColor(CONTAINS_KEYWORDS, 100, false, false), GRAY, 
            '–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã - —Å–µ—Ä—ã–µ');
        assertEqual(getFileTrafficLightColor(NO_KEYWORDS, 50, false, false), GRAY, 
            '–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã - —Å–µ—Ä—ã–µ');
        assertEqual(getFileTrafficLightColor(ERROR, 100, false, false), RED, 
            '–ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã - –∫—Ä–∞—Å–Ω—ã–µ');
        assertEqual(getFileTrafficLightColor(UNSUPPORTED, 50, false, false), RED, 
            '–ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã - –∫—Ä–∞—Å–Ω—ã–µ');
    });
    
    describe('  –ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞', () => {
        assertEqual(getFileTrafficLightColor(CONTAINS_KEYWORDS, 100, true, true), GREEN, 
            '–° —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ = –∑–µ–ª—ë–Ω—ã–π');
        assertEqual(getFileTrafficLightColor(NO_KEYWORDS, 50, false, true), YELLOW, 
            '–ë–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π = –∂—ë–ª—Ç—ã–π');
        assertEqual(getFileTrafficLightColor(ERROR, 100, true, true), RED, 
            '–ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –∫—Ä–∞—Å–Ω—ã–º–∏');
        assertEqual(getFileTrafficLightColor(UNSUPPORTED, 50, true, true), RED, 
            '–ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –∫—Ä–∞—Å–Ω—ã–º–∏');
    });
    
    describe('  –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫ (exclude mode)', () => {
        // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–∏—Å–∫–∞
        assertEqual(getFileTrafficLightColor(NO_KEYWORDS, 100, true, true), GREEN, 
            '–§–∞–π–ª –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ = —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ = –∑–µ–ª—ë–Ω—ã–π');
        assertEqual(getFileTrafficLightColor(CONTAINS_KEYWORDS, 100, false, true), YELLOW, 
            '–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ = –Ω–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ = –∂—ë–ª—Ç—ã–π');
    });
    
    describe('  –§–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–∞—Ö', () => {
        assertEqual(getFileTrafficLightColor(ERROR, 100, false, false), RED, 
            '–ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ - –∫—Ä–∞—Å–Ω—ã–π');
        assertEqual(getFileTrafficLightColor(CONTAINS_KEYWORDS, 100, false, false), GRAY, 
            '–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ –¥–æ –ø–æ–∏—Å–∫–∞ - —Å–µ—Ä—ã–π');
        assertEqual(getFileTrafficLightColor(CONTAINS_KEYWORDS, 100, true, true), GREEN, 
            '–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ - –∑–µ–ª—ë–Ω—ã–π');
        assertEqual(getFileTrafficLightColor(NO_KEYWORDS, 50, false, true), YELLOW, 
            '–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –∂—ë–ª—Ç—ã–π');
        
        // –ê—Ä—Ö–∏–≤ –∫–∞–∫ –ø–∞–ø–∫–∞
        assertEqual(getFolderTrafficLightColor([RED, RED, RED]), RED, 
            '–ê—Ä—Ö–∏–≤ —Å –¢–û–õ–¨–ö–û –∫—Ä–∞—Å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ - –∫—Ä–∞—Å–Ω—ã–π');
        assertEqual(getFolderTrafficLightColor([RED, GREEN]), GREEN, 
            '–ê—Ä—Ö–∏–≤ —Å –∑–µ–ª—ë–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ - –∑–µ–ª—ë–Ω—ã–π (–∑–µ–ª—ë–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ)');
        assertEqual(getFolderTrafficLightColor([GREEN, YELLOW]), GREEN, 
            '–ê—Ä—Ö–∏–≤ —Å –∑–µ–ª—ë–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ - –∑–µ–ª—ë–Ω—ã–π');
        assertEqual(getFolderTrafficLightColor([YELLOW, GRAY]), YELLOW, 
            '–ê—Ä—Ö–∏–≤ —Å –∂—ë–ª—Ç—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ - –∂—ë–ª—Ç—ã–π');
        assertEqual(getFolderTrafficLightColor([GRAY, GRAY]), GRAY, 
            '–ê—Ä—Ö–∏–≤ —Å —Å–µ—Ä—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ - —Å–µ—Ä—ã–π');
    });
});

// –ò—Ç–æ–≥–∏
console.log('\n' + '='.repeat(60));
if (testsFailed === 0) {
    console.log(`‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! (${testsPassed} —Ç–µ—Å—Ç–æ–≤)`);
    process.exit(0);
} else {
    console.log(`‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å:`);
    console.log(`   –ü—Ä–æ–π–¥–µ–Ω–æ: ${testsPassed}`);
    console.log(`   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${testsFailed}`);
    process.exit(1);
}
