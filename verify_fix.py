#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π.
"""

from webapp.utils.traffic_lights import TrafficLightLogic


def old_folder_logic(file_colors):
    """–°—Ç–∞—Ä–∞—è (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è) –ª–æ–≥–∏–∫–∞ –ø–∞–ø–æ–∫."""
    if not file_colors:
        return 'gray'
    
    has_red = 'red' in file_colors
    has_green = 'green' in file_colors
    has_yellow = 'yellow' in file_colors
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∫—Ä–∞—Å–Ω—ã–π -> –∑–µ–ª—ë–Ω—ã–π -> –∂—ë–ª—Ç—ã–π -> —Å–µ—Ä—ã–π
    if has_red:
        return 'red'
    if has_green:
        return 'green'
    if has_yellow:
        return 'yellow'
    return 'gray'


def new_folder_logic(file_colors):
    """–ù–æ–≤–∞—è (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è) –ª–æ–≥–∏–∫–∞ –ø–∞–ø–æ–∫."""
    return TrafficLightLogic.get_folder_traffic_light_color(file_colors)


def color_emoji(color):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ü–≤–µ—Ç–∞."""
    emoji_map = {
        'red': 'üî¥',
        'yellow': 'üü°',
        'green': 'üü¢',
        'gray': '‚ö™'
    }
    return emoji_map.get(color, '‚ö´')


def compare_logic(file_colors_list):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—É—é –∏ –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É."""
    print("\n" + "=" * 80)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –°–í–ï–¢–û–§–û–†–û–í –î–õ–Ø –ü–ê–ü–û–ö")
    print("=" * 80)
    
    differences = 0
    for file_colors in file_colors_list:
        old_result = old_folder_logic(file_colors)
        new_result = new_folder_logic(file_colors)
        
        files_str = str(file_colors)
        old_emoji = color_emoji(old_result)
        new_emoji = color_emoji(new_result)
        
        if old_result != new_result:
            differences += 1
            print(f"\n‚ùå –†–ê–ó–õ–ò–ß–ò–ï #{differences}:")
            print(f"   –§–∞–π–ª—ã: {files_str}")
            print(f"   –ë—ã–ª–æ:  {old_emoji} {old_result}")
            print(f"   –°—Ç–∞–ª–æ: {new_emoji} {new_result}")
        else:
            print(f"\n‚úÖ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô:")
            print(f"   –§–∞–π–ª—ã: {files_str}")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {new_emoji} {new_result}")
    
    print("\n" + "=" * 80)
    print(f"–ò–¢–û–ì–û: –ù–∞–π–¥–µ–Ω–æ {differences} —Ä–∞–∑–ª–∏—á–∏–π")
    print("=" * 80)
    return differences


def test_file_logic():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ª–æ–≥–∏–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å."""
    print("\n" + "=" * 80)
    print("–ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –§–ê–ô–õ–û–í (–Ω–µ –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)")
    print("=" * 80)
    
    tests = [
        ('error', 100, False, False, 'red', "–ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (error)"),
        ('unsupported', 50, False, False, 'red', "–ù–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (unsupported)"),
        ('contains_keywords', 0, False, False, 'red', "char_count=0"),
        ('contains_keywords', 100, False, False, 'gray', "–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –ø–æ–∏—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"),
        ('contains_keywords', 100, True, True, 'green', "–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"),
        ('contains_keywords', 100, False, True, 'yellow', "–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"),
    ]
    
    all_passed = True
    for status, char_count, has_results, search_performed, expected, description in tests:
        result = TrafficLightLogic.get_file_traffic_light_color(
            status, char_count, has_results, search_performed
        )
        emoji = color_emoji(result)
        passed = result == expected
        symbol = "‚úÖ" if passed else "‚ùå"
        
        if not passed:
            all_passed = False
        
        print(f"{symbol} {description}")
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {color_emoji(expected)} {expected}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ:  {emoji} {result}")
    
    print("\n" + "=" * 80)
    if all_passed:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –§–ê–ô–õ–û–í –ü–†–û–ô–î–ï–ù–´ - –ª–æ–≥–∏–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –§–ê–ô–õ–û–í –ù–ï –ü–†–û–ô–î–ï–ù–´")
    print("=" * 80)
    return all_passed


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("\n" + "=" * 80)
    print("–í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–û–ì–ò–ö–ò –°–í–ï–¢–û–§–û–†–û–í")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ñ–∞–π–ª–æ–≤
    files_ok = test_file_logic()
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ª–æ–≥–∏–∫—É –ø–∞–ø–æ–∫
    test_cases = [
        ['red', 'green', 'yellow', 'gray'],
        ['red', 'green'],
        ['red', 'yellow'],
        ['red', 'gray'],
        ['red', 'red', 'red'],
        ['green', 'yellow', 'gray'],
        ['green', 'yellow'],
        ['yellow', 'gray'],
        ['yellow'],
        ['gray', 'gray'],
    ]
    
    differences = compare_logic(test_cases)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print("\n" + "=" * 80)
    print("–ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê")
    print("=" * 80)
    print(f"‚úÖ –õ–æ–≥–∏–∫–∞ —Ñ–∞–π–ª–æ–≤: {'OK' if files_ok else '–û–®–ò–ë–ö–ê'}")
    print(f"{'‚úÖ' if differences > 0 else '‚ö†Ô∏è'} –õ–æ–≥–∏–∫–∞ –ø–∞–ø–æ–∫: {differences} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    print("\n–û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
    print("1. [red, green] ‚Üí –±—ã–ª–æ üî¥, —Å—Ç–∞–ª–æ üü¢ (–∑–µ–ª—ë–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ)")
    print("2. [red, yellow] ‚Üí –±—ã–ª–æ üî¥, —Å—Ç–∞–ª–æ üü° (–∂—ë–ª—Ç—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ)")
    print("3. [red, gray] ‚Üí –±—ã–ª–æ üî¥, —Å—Ç–∞–ª–æ ‚ö™ (—Å–µ—Ä—ã–π –±–µ–∑ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)")
    print("\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–∞–ø–æ–∫:")
    print("  –ë—ã–ª–æ:  –ö—Ä–∞—Å–Ω—ã–π > –ó–µ–ª—ë–Ω—ã–π > –ñ—ë–ª—Ç—ã–π > –°–µ—Ä—ã–π")
    print("  –°—Ç–∞–ª–æ: –ó–µ–ª—ë–Ω—ã–π > –ñ—ë–ª—Ç—ã–π > –ö—Ä–∞—Å–Ω—ã–π > –°–µ—Ä—ã–π")
    print("=" * 80)
    
    if files_ok and differences > 0:
        print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–û!")
        return 0
    else:
        print("\n‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º")
        return 1


if __name__ == '__main__':
    import sys
    sys.exit(main())
